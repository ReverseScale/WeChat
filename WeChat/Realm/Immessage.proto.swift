/// Generated by the Protocol Buffers 3.7.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "IMMessage.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct ImmessageRoot {
    public static let `default` = ImmessageRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class ProtoUser : GeneratedMessage {
    public typealias BuilderType = ProtoUser.Builder

    public static func == (lhs: ProtoUser, rhs: ProtoUser) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasObjectId == rhs.hasObjectId) && (!lhs.hasObjectId || lhs.objectId == rhs.objectId)
        fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasNickName == rhs.hasNickName) && (!lhs.hasNickName || lhs.nickName == rhs.nickName)
        fieldCheck = fieldCheck && (lhs.hasCountry == rhs.hasCountry) && (!lhs.hasCountry || lhs.country == rhs.country)
        fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
        fieldCheck = fieldCheck && (lhs.hasPicture == rhs.hasPicture) && (!lhs.hasPicture || lhs.picture == rhs.picture)
        fieldCheck = fieldCheck && (lhs.hasThumbnail == rhs.hasThumbnail) && (!lhs.hasThumbnail || lhs.thumbnail == rhs.thumbnail)
        fieldCheck = fieldCheck && (lhs.hasLastActive == rhs.hasLastActive) && (!lhs.hasLastActive || lhs.lastActive == rhs.lastActive)
        fieldCheck = fieldCheck && (lhs.hasLastTerminate == rhs.hasLastTerminate) && (!lhs.hasLastTerminate || lhs.lastTerminate == rhs.lastTerminate)
        fieldCheck = fieldCheck && (lhs.hasCreatedAt == rhs.hasCreatedAt) && (!lhs.hasCreatedAt || lhs.createdAt == rhs.createdAt)
        fieldCheck = fieldCheck && (lhs.hasUpdatedAt == rhs.hasUpdatedAt) && (!lhs.hasUpdatedAt || lhs.updatedAt == rhs.updatedAt)
        fieldCheck = fieldCheck && (lhs.hasGender == rhs.hasGender) && (!lhs.hasGender || lhs.gender == rhs.gender)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    /// protoc IMMessage.proto --swift_out="./"
    public fileprivate(set) var objectId:String! = nil
    public fileprivate(set) var hasObjectId:Bool = false

    public fileprivate(set) var phone:String! = nil
    public fileprivate(set) var hasPhone:Bool = false

    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var nickName:String! = nil
    public fileprivate(set) var hasNickName:Bool = false

    public fileprivate(set) var country:String! = nil
    public fileprivate(set) var hasCountry:Bool = false

    public fileprivate(set) var status:String! = nil
    public fileprivate(set) var hasStatus:Bool = false

    public fileprivate(set) var picture:String! = nil
    public fileprivate(set) var hasPicture:Bool = false

    public fileprivate(set) var thumbnail:String! = nil
    public fileprivate(set) var hasThumbnail:Bool = false

    public fileprivate(set) var lastActive:Int64! = nil
    public fileprivate(set) var hasLastActive:Bool = false

    public fileprivate(set) var lastTerminate:Int64! = nil
    public fileprivate(set) var hasLastTerminate:Bool = false

    public fileprivate(set) var createdAt:Int64! = nil
    public fileprivate(set) var hasCreatedAt:Bool = false

    public fileprivate(set) var updatedAt:Int64! = nil
    public fileprivate(set) var hasUpdatedAt:Bool = false

    public fileprivate(set) var gender:String! = nil
    public fileprivate(set) var hasGender:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasObjectId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"objectId\" mark required")
        }
        if !hasPhone {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"phone\" mark required")
        }
        if !hasName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"name\" mark required")
        }
        if !hasNickName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"nickName\" mark required")
        }
        if !hasCountry {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"country\" mark required")
        }
        if !hasStatus {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"status\" mark required")
        }
        if !hasPicture {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"picture\" mark required")
        }
        if !hasThumbnail {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"thumbnail\" mark required")
        }
        if !hasLastActive {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"lastActive\" mark required")
        }
        if !hasLastTerminate {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"lastTerminate\" mark required")
        }
        if !hasCreatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"createdAt\" mark required")
        }
        if !hasUpdatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"updatedAt\" mark required")
        }
        if !hasGender {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"gender\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasObjectId {
            try codedOutputStream.writeString(fieldNumber: 1, value:objectId)
        }
        if hasPhone {
            try codedOutputStream.writeString(fieldNumber: 2, value:phone)
        }
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 3, value:name)
        }
        if hasNickName {
            try codedOutputStream.writeString(fieldNumber: 4, value:nickName)
        }
        if hasCountry {
            try codedOutputStream.writeString(fieldNumber: 5, value:country)
        }
        if hasStatus {
            try codedOutputStream.writeString(fieldNumber: 6, value:status)
        }
        if hasPicture {
            try codedOutputStream.writeString(fieldNumber: 7, value:picture)
        }
        if hasThumbnail {
            try codedOutputStream.writeString(fieldNumber: 8, value:thumbnail)
        }
        if hasLastActive {
            try codedOutputStream.writeInt64(fieldNumber: 9, value:lastActive)
        }
        if hasLastTerminate {
            try codedOutputStream.writeInt64(fieldNumber: 10, value:lastTerminate)
        }
        if hasCreatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 11, value:createdAt)
        }
        if hasUpdatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 12, value:updatedAt)
        }
        if hasGender {
            try codedOutputStream.writeString(fieldNumber: 13, value:gender)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasObjectId {
            serialize_size += objectId.computeStringSize(fieldNumber: 1)
        }
        if hasPhone {
            serialize_size += phone.computeStringSize(fieldNumber: 2)
        }
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 3)
        }
        if hasNickName {
            serialize_size += nickName.computeStringSize(fieldNumber: 4)
        }
        if hasCountry {
            serialize_size += country.computeStringSize(fieldNumber: 5)
        }
        if hasStatus {
            serialize_size += status.computeStringSize(fieldNumber: 6)
        }
        if hasPicture {
            serialize_size += picture.computeStringSize(fieldNumber: 7)
        }
        if hasThumbnail {
            serialize_size += thumbnail.computeStringSize(fieldNumber: 8)
        }
        if hasLastActive {
            serialize_size += lastActive.computeInt64Size(fieldNumber: 9)
        }
        if hasLastTerminate {
            serialize_size += lastTerminate.computeInt64Size(fieldNumber: 10)
        }
        if hasCreatedAt {
            serialize_size += createdAt.computeInt64Size(fieldNumber: 11)
        }
        if hasUpdatedAt {
            serialize_size += updatedAt.computeInt64Size(fieldNumber: 12)
        }
        if hasGender {
            serialize_size += gender.computeStringSize(fieldNumber: 13)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> ProtoUser.Builder {
        return ProtoUser.classBuilder() as! ProtoUser.Builder
    }
    public func getBuilder() -> ProtoUser.Builder {
        return classBuilder() as! ProtoUser.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoUser.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoUser.Builder()
    }
    public func toBuilder() throws -> ProtoUser.Builder {
        return try ProtoUser.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:ProtoUser) throws -> ProtoUser.Builder {
        return try ProtoUser.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasObjectId {
            jsonMap["objectId"] = objectId
        }
        if hasPhone {
            jsonMap["phone"] = phone
        }
        if hasName {
            jsonMap["name"] = name
        }
        if hasNickName {
            jsonMap["nickName"] = nickName
        }
        if hasCountry {
            jsonMap["country"] = country
        }
        if hasStatus {
            jsonMap["status"] = status
        }
        if hasPicture {
            jsonMap["picture"] = picture
        }
        if hasThumbnail {
            jsonMap["thumbnail"] = thumbnail
        }
        if hasLastActive {
            jsonMap["lastActive"] = "\(lastActive!)"
        }
        if hasLastTerminate {
            jsonMap["lastTerminate"] = "\(lastTerminate!)"
        }
        if hasCreatedAt {
            jsonMap["createdAt"] = "\(createdAt!)"
        }
        if hasUpdatedAt {
            jsonMap["updatedAt"] = "\(updatedAt!)"
        }
        if hasGender {
            jsonMap["gender"] = gender
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ProtoUser {
        return try ProtoUser.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoUser {
        return try ProtoUser.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasObjectId {
            output += "\(indent) objectId: \(String(describing: objectId)) \n"
        }
        if hasPhone {
            output += "\(indent) phone: \(String(describing: phone)) \n"
        }
        if hasName {
            output += "\(indent) name: \(String(describing: name)) \n"
        }
        if hasNickName {
            output += "\(indent) nickName: \(String(describing: nickName)) \n"
        }
        if hasCountry {
            output += "\(indent) country: \(String(describing: country)) \n"
        }
        if hasStatus {
            output += "\(indent) status: \(String(describing: status)) \n"
        }
        if hasPicture {
            output += "\(indent) picture: \(String(describing: picture)) \n"
        }
        if hasThumbnail {
            output += "\(indent) thumbnail: \(String(describing: thumbnail)) \n"
        }
        if hasLastActive {
            output += "\(indent) lastActive: \(String(describing: lastActive)) \n"
        }
        if hasLastTerminate {
            output += "\(indent) lastTerminate: \(String(describing: lastTerminate)) \n"
        }
        if hasCreatedAt {
            output += "\(indent) createdAt: \(String(describing: createdAt)) \n"
        }
        if hasUpdatedAt {
            output += "\(indent) updatedAt: \(String(describing: updatedAt)) \n"
        }
        if hasGender {
            output += "\(indent) gender: \(String(describing: gender)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasObjectId {
                hashCode = (hashCode &* 31) &+ objectId.hashValue
            }
            if hasPhone {
                hashCode = (hashCode &* 31) &+ phone.hashValue
            }
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasNickName {
                hashCode = (hashCode &* 31) &+ nickName.hashValue
            }
            if hasCountry {
                hashCode = (hashCode &* 31) &+ country.hashValue
            }
            if hasStatus {
                hashCode = (hashCode &* 31) &+ status.hashValue
            }
            if hasPicture {
                hashCode = (hashCode &* 31) &+ picture.hashValue
            }
            if hasThumbnail {
                hashCode = (hashCode &* 31) &+ thumbnail.hashValue
            }
            if hasLastActive {
                hashCode = (hashCode &* 31) &+ lastActive.hashValue
            }
            if hasLastTerminate {
                hashCode = (hashCode &* 31) &+ lastTerminate.hashValue
            }
            if hasCreatedAt {
                hashCode = (hashCode &* 31) &+ createdAt.hashValue
            }
            if hasUpdatedAt {
                hashCode = (hashCode &* 31) &+ updatedAt.hashValue
            }
            if hasGender {
                hashCode = (hashCode &* 31) &+ gender.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtoUser"
    }
    override public func className() -> String {
        return "ProtoUser"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:ProtoUser = ProtoUser()
        public func getMessage() -> ProtoUser {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        /// protoc IMMessage.proto --swift_out="./"
        public var objectId:String {
            get {
                return builderResult.objectId
            }
            set (value) {
                builderResult.hasObjectId = true
                builderResult.objectId = value
            }
        }
        public var hasObjectId:Bool {
            get {
                return builderResult.hasObjectId
            }
        }
        @discardableResult
        public func setObjectId(_ value:String) -> ProtoUser.Builder {
            self.objectId = value
            return self
        }
        @discardableResult
        public func clearObjectId() -> ProtoUser.Builder{
            builderResult.hasObjectId = false
            builderResult.objectId = nil
            return self
        }
        public var phone:String {
            get {
                return builderResult.phone
            }
            set (value) {
                builderResult.hasPhone = true
                builderResult.phone = value
            }
        }
        public var hasPhone:Bool {
            get {
                return builderResult.hasPhone
            }
        }
        @discardableResult
        public func setPhone(_ value:String) -> ProtoUser.Builder {
            self.phone = value
            return self
        }
        @discardableResult
        public func clearPhone() -> ProtoUser.Builder{
            builderResult.hasPhone = false
            builderResult.phone = nil
            return self
        }
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> ProtoUser.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> ProtoUser.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        public var nickName:String {
            get {
                return builderResult.nickName
            }
            set (value) {
                builderResult.hasNickName = true
                builderResult.nickName = value
            }
        }
        public var hasNickName:Bool {
            get {
                return builderResult.hasNickName
            }
        }
        @discardableResult
        public func setNickName(_ value:String) -> ProtoUser.Builder {
            self.nickName = value
            return self
        }
        @discardableResult
        public func clearNickName() -> ProtoUser.Builder{
            builderResult.hasNickName = false
            builderResult.nickName = nil
            return self
        }
        public var country:String {
            get {
                return builderResult.country
            }
            set (value) {
                builderResult.hasCountry = true
                builderResult.country = value
            }
        }
        public var hasCountry:Bool {
            get {
                return builderResult.hasCountry
            }
        }
        @discardableResult
        public func setCountry(_ value:String) -> ProtoUser.Builder {
            self.country = value
            return self
        }
        @discardableResult
        public func clearCountry() -> ProtoUser.Builder{
            builderResult.hasCountry = false
            builderResult.country = nil
            return self
        }
        public var status:String {
            get {
                return builderResult.status
            }
            set (value) {
                builderResult.hasStatus = true
                builderResult.status = value
            }
        }
        public var hasStatus:Bool {
            get {
                return builderResult.hasStatus
            }
        }
        @discardableResult
        public func setStatus(_ value:String) -> ProtoUser.Builder {
            self.status = value
            return self
        }
        @discardableResult
        public func clearStatus() -> ProtoUser.Builder{
            builderResult.hasStatus = false
            builderResult.status = nil
            return self
        }
        public var picture:String {
            get {
                return builderResult.picture
            }
            set (value) {
                builderResult.hasPicture = true
                builderResult.picture = value
            }
        }
        public var hasPicture:Bool {
            get {
                return builderResult.hasPicture
            }
        }
        @discardableResult
        public func setPicture(_ value:String) -> ProtoUser.Builder {
            self.picture = value
            return self
        }
        @discardableResult
        public func clearPicture() -> ProtoUser.Builder{
            builderResult.hasPicture = false
            builderResult.picture = nil
            return self
        }
        public var thumbnail:String {
            get {
                return builderResult.thumbnail
            }
            set (value) {
                builderResult.hasThumbnail = true
                builderResult.thumbnail = value
            }
        }
        public var hasThumbnail:Bool {
            get {
                return builderResult.hasThumbnail
            }
        }
        @discardableResult
        public func setThumbnail(_ value:String) -> ProtoUser.Builder {
            self.thumbnail = value
            return self
        }
        @discardableResult
        public func clearThumbnail() -> ProtoUser.Builder{
            builderResult.hasThumbnail = false
            builderResult.thumbnail = nil
            return self
        }
        public var lastActive:Int64 {
            get {
                return builderResult.lastActive
            }
            set (value) {
                builderResult.hasLastActive = true
                builderResult.lastActive = value
            }
        }
        public var hasLastActive:Bool {
            get {
                return builderResult.hasLastActive
            }
        }
        @discardableResult
        public func setLastActive(_ value:Int64) -> ProtoUser.Builder {
            self.lastActive = value
            return self
        }
        @discardableResult
        public func clearLastActive() -> ProtoUser.Builder{
            builderResult.hasLastActive = false
            builderResult.lastActive = nil
            return self
        }
        public var lastTerminate:Int64 {
            get {
                return builderResult.lastTerminate
            }
            set (value) {
                builderResult.hasLastTerminate = true
                builderResult.lastTerminate = value
            }
        }
        public var hasLastTerminate:Bool {
            get {
                return builderResult.hasLastTerminate
            }
        }
        @discardableResult
        public func setLastTerminate(_ value:Int64) -> ProtoUser.Builder {
            self.lastTerminate = value
            return self
        }
        @discardableResult
        public func clearLastTerminate() -> ProtoUser.Builder{
            builderResult.hasLastTerminate = false
            builderResult.lastTerminate = nil
            return self
        }
        public var createdAt:Int64 {
            get {
                return builderResult.createdAt
            }
            set (value) {
                builderResult.hasCreatedAt = true
                builderResult.createdAt = value
            }
        }
        public var hasCreatedAt:Bool {
            get {
                return builderResult.hasCreatedAt
            }
        }
        @discardableResult
        public func setCreatedAt(_ value:Int64) -> ProtoUser.Builder {
            self.createdAt = value
            return self
        }
        @discardableResult
        public func clearCreatedAt() -> ProtoUser.Builder{
            builderResult.hasCreatedAt = false
            builderResult.createdAt = nil
            return self
        }
        public var updatedAt:Int64 {
            get {
                return builderResult.updatedAt
            }
            set (value) {
                builderResult.hasUpdatedAt = true
                builderResult.updatedAt = value
            }
        }
        public var hasUpdatedAt:Bool {
            get {
                return builderResult.hasUpdatedAt
            }
        }
        @discardableResult
        public func setUpdatedAt(_ value:Int64) -> ProtoUser.Builder {
            self.updatedAt = value
            return self
        }
        @discardableResult
        public func clearUpdatedAt() -> ProtoUser.Builder{
            builderResult.hasUpdatedAt = false
            builderResult.updatedAt = nil
            return self
        }
        public var gender:String {
            get {
                return builderResult.gender
            }
            set (value) {
                builderResult.hasGender = true
                builderResult.gender = value
            }
        }
        public var hasGender:Bool {
            get {
                return builderResult.hasGender
            }
        }
        @discardableResult
        public func setGender(_ value:String) -> ProtoUser.Builder {
            self.gender = value
            return self
        }
        @discardableResult
        public func clearGender() -> ProtoUser.Builder{
            builderResult.hasGender = false
            builderResult.gender = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> ProtoUser.Builder {
            builderResult = ProtoUser()
            return self
        }
        override public func clone() throws -> ProtoUser.Builder {
            return try ProtoUser.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> ProtoUser {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> ProtoUser {
            let returnMe:ProtoUser = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:ProtoUser) throws -> ProtoUser.Builder {
            if other == ProtoUser() {
                return self
            }
            if other.hasObjectId {
                objectId = other.objectId
            }
            if other.hasPhone {
                phone = other.phone
            }
            if other.hasName {
                name = other.name
            }
            if other.hasNickName {
                nickName = other.nickName
            }
            if other.hasCountry {
                country = other.country
            }
            if other.hasStatus {
                status = other.status
            }
            if other.hasPicture {
                picture = other.picture
            }
            if other.hasThumbnail {
                thumbnail = other.thumbnail
            }
            if other.hasLastActive {
                lastActive = other.lastActive
            }
            if other.hasLastTerminate {
                lastTerminate = other.lastTerminate
            }
            if other.hasCreatedAt {
                createdAt = other.createdAt
            }
            if other.hasUpdatedAt {
                updatedAt = other.updatedAt
            }
            if other.hasGender {
                gender = other.gender
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ProtoUser.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoUser.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    objectId = try codedInputStream.readString()

                case 18:
                    phone = try codedInputStream.readString()

                case 26:
                    name = try codedInputStream.readString()

                case 34:
                    nickName = try codedInputStream.readString()

                case 42:
                    country = try codedInputStream.readString()

                case 50:
                    status = try codedInputStream.readString()

                case 58:
                    picture = try codedInputStream.readString()

                case 66:
                    thumbnail = try codedInputStream.readString()

                case 72:
                    lastActive = try codedInputStream.readInt64()

                case 80:
                    lastTerminate = try codedInputStream.readInt64()

                case 88:
                    createdAt = try codedInputStream.readInt64()

                case 96:
                    updatedAt = try codedInputStream.readInt64()

                case 106:
                    gender = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ProtoUser.Builder {
            let resultDecodedBuilder = ProtoUser.Builder()
            if let jsonValueObjectId = jsonMap["objectId"] as? String {
                resultDecodedBuilder.objectId = jsonValueObjectId
            }
            if let jsonValuePhone = jsonMap["phone"] as? String {
                resultDecodedBuilder.phone = jsonValuePhone
            }
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueNickName = jsonMap["nickName"] as? String {
                resultDecodedBuilder.nickName = jsonValueNickName
            }
            if let jsonValueCountry = jsonMap["country"] as? String {
                resultDecodedBuilder.country = jsonValueCountry
            }
            if let jsonValueStatus = jsonMap["status"] as? String {
                resultDecodedBuilder.status = jsonValueStatus
            }
            if let jsonValuePicture = jsonMap["picture"] as? String {
                resultDecodedBuilder.picture = jsonValuePicture
            }
            if let jsonValueThumbnail = jsonMap["thumbnail"] as? String {
                resultDecodedBuilder.thumbnail = jsonValueThumbnail
            }
            if let jsonValueLastActive = jsonMap["lastActive"] as? String {
                resultDecodedBuilder.lastActive = Int64(jsonValueLastActive)!
            } else if let jsonValueLastActive = jsonMap["lastActive"] as? Int {
                resultDecodedBuilder.lastActive = Int64(jsonValueLastActive)
            }
            if let jsonValueLastTerminate = jsonMap["lastTerminate"] as? String {
                resultDecodedBuilder.lastTerminate = Int64(jsonValueLastTerminate)!
            } else if let jsonValueLastTerminate = jsonMap["lastTerminate"] as? Int {
                resultDecodedBuilder.lastTerminate = Int64(jsonValueLastTerminate)
            }
            if let jsonValueCreatedAt = jsonMap["createdAt"] as? String {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)!
            } else if let jsonValueCreatedAt = jsonMap["createdAt"] as? Int {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)
            }
            if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? String {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)!
            } else if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? Int {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)
            }
            if let jsonValueGender = jsonMap["gender"] as? String {
                resultDecodedBuilder.gender = jsonValueGender
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoUser.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try ProtoUser.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class ProtoFriend : GeneratedMessage {
    public typealias BuilderType = ProtoFriend.Builder

    public static func == (lhs: ProtoFriend, rhs: ProtoFriend) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasObjectId == rhs.hasObjectId) && (!lhs.hasObjectId || lhs.objectId == rhs.objectId)
        fieldCheck = fieldCheck && (lhs.hasFriendId == rhs.hasFriendId) && (!lhs.hasFriendId || lhs.friendId == rhs.friendId)
        fieldCheck = fieldCheck && (lhs.hasSection == rhs.hasSection) && (!lhs.hasSection || lhs.section == rhs.section)
        fieldCheck = fieldCheck && (lhs.hasIsDeleted == rhs.hasIsDeleted) && (!lhs.hasIsDeleted || lhs.isDeleted == rhs.isDeleted)
        fieldCheck = fieldCheck && (lhs.hasCreatedAt == rhs.hasCreatedAt) && (!lhs.hasCreatedAt || lhs.createdAt == rhs.createdAt)
        fieldCheck = fieldCheck && (lhs.hasUpdatedAt == rhs.hasUpdatedAt) && (!lhs.hasUpdatedAt || lhs.updatedAt == rhs.updatedAt)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasPicture == rhs.hasPicture) && (!lhs.hasPicture || lhs.picture == rhs.picture)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    /// protoc IMMessage.proto --swift_out="./"
    public fileprivate(set) var objectId:String! = nil
    public fileprivate(set) var hasObjectId:Bool = false

    public fileprivate(set) var friendId:String! = nil
    public fileprivate(set) var hasFriendId:Bool = false

    public fileprivate(set) var section:String! = nil
    public fileprivate(set) var hasSection:Bool = false

    public fileprivate(set) var isDeleted:Bool! = nil
    public fileprivate(set) var hasIsDeleted:Bool = false

    public fileprivate(set) var createdAt:Int64! = nil
    public fileprivate(set) var hasCreatedAt:Bool = false

    public fileprivate(set) var updatedAt:Int64! = nil
    public fileprivate(set) var hasUpdatedAt:Bool = false

    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var picture:String! = nil
    public fileprivate(set) var hasPicture:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasObjectId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"objectId\" mark required")
        }
        if !hasFriendId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"friendId\" mark required")
        }
        if !hasSection {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"section\" mark required")
        }
        if !hasIsDeleted {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"isDeleted\" mark required")
        }
        if !hasCreatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"createdAt\" mark required")
        }
        if !hasUpdatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"updatedAt\" mark required")
        }
        if !hasName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"name\" mark required")
        }
        if !hasPicture {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"picture\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasObjectId {
            try codedOutputStream.writeString(fieldNumber: 1, value:objectId)
        }
        if hasFriendId {
            try codedOutputStream.writeString(fieldNumber: 2, value:friendId)
        }
        if hasSection {
            try codedOutputStream.writeString(fieldNumber: 3, value:section)
        }
        if hasIsDeleted {
            try codedOutputStream.writeBool(fieldNumber: 4, value:isDeleted)
        }
        if hasCreatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 5, value:createdAt)
        }
        if hasUpdatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 6, value:updatedAt)
        }
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 7, value:name)
        }
        if hasPicture {
            try codedOutputStream.writeString(fieldNumber: 8, value:picture)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasObjectId {
            serialize_size += objectId.computeStringSize(fieldNumber: 1)
        }
        if hasFriendId {
            serialize_size += friendId.computeStringSize(fieldNumber: 2)
        }
        if hasSection {
            serialize_size += section.computeStringSize(fieldNumber: 3)
        }
        if hasIsDeleted {
            serialize_size += isDeleted.computeBoolSize(fieldNumber: 4)
        }
        if hasCreatedAt {
            serialize_size += createdAt.computeInt64Size(fieldNumber: 5)
        }
        if hasUpdatedAt {
            serialize_size += updatedAt.computeInt64Size(fieldNumber: 6)
        }
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 7)
        }
        if hasPicture {
            serialize_size += picture.computeStringSize(fieldNumber: 8)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> ProtoFriend.Builder {
        return ProtoFriend.classBuilder() as! ProtoFriend.Builder
    }
    public func getBuilder() -> ProtoFriend.Builder {
        return classBuilder() as! ProtoFriend.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoFriend.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoFriend.Builder()
    }
    public func toBuilder() throws -> ProtoFriend.Builder {
        return try ProtoFriend.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:ProtoFriend) throws -> ProtoFriend.Builder {
        return try ProtoFriend.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasObjectId {
            jsonMap["objectId"] = objectId
        }
        if hasFriendId {
            jsonMap["friendId"] = friendId
        }
        if hasSection {
            jsonMap["section"] = section
        }
        if hasIsDeleted {
            jsonMap["isDeleted"] = isDeleted
        }
        if hasCreatedAt {
            jsonMap["createdAt"] = "\(createdAt!)"
        }
        if hasUpdatedAt {
            jsonMap["updatedAt"] = "\(updatedAt!)"
        }
        if hasName {
            jsonMap["name"] = name
        }
        if hasPicture {
            jsonMap["picture"] = picture
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ProtoFriend {
        return try ProtoFriend.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoFriend {
        return try ProtoFriend.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasObjectId {
            output += "\(indent) objectId: \(String(describing: objectId)) \n"
        }
        if hasFriendId {
            output += "\(indent) friendId: \(String(describing: friendId)) \n"
        }
        if hasSection {
            output += "\(indent) section: \(String(describing: section)) \n"
        }
        if hasIsDeleted {
            output += "\(indent) isDeleted: \(String(describing: isDeleted)) \n"
        }
        if hasCreatedAt {
            output += "\(indent) createdAt: \(String(describing: createdAt)) \n"
        }
        if hasUpdatedAt {
            output += "\(indent) updatedAt: \(String(describing: updatedAt)) \n"
        }
        if hasName {
            output += "\(indent) name: \(String(describing: name)) \n"
        }
        if hasPicture {
            output += "\(indent) picture: \(String(describing: picture)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasObjectId {
                hashCode = (hashCode &* 31) &+ objectId.hashValue
            }
            if hasFriendId {
                hashCode = (hashCode &* 31) &+ friendId.hashValue
            }
            if hasSection {
                hashCode = (hashCode &* 31) &+ section.hashValue
            }
            if hasIsDeleted {
                hashCode = (hashCode &* 31) &+ isDeleted.hashValue
            }
            if hasCreatedAt {
                hashCode = (hashCode &* 31) &+ createdAt.hashValue
            }
            if hasUpdatedAt {
                hashCode = (hashCode &* 31) &+ updatedAt.hashValue
            }
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasPicture {
                hashCode = (hashCode &* 31) &+ picture.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtoFriend"
    }
    override public func className() -> String {
        return "ProtoFriend"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:ProtoFriend = ProtoFriend()
        public func getMessage() -> ProtoFriend {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        /// protoc IMMessage.proto --swift_out="./"
        public var objectId:String {
            get {
                return builderResult.objectId
            }
            set (value) {
                builderResult.hasObjectId = true
                builderResult.objectId = value
            }
        }
        public var hasObjectId:Bool {
            get {
                return builderResult.hasObjectId
            }
        }
        @discardableResult
        public func setObjectId(_ value:String) -> ProtoFriend.Builder {
            self.objectId = value
            return self
        }
        @discardableResult
        public func clearObjectId() -> ProtoFriend.Builder{
            builderResult.hasObjectId = false
            builderResult.objectId = nil
            return self
        }
        public var friendId:String {
            get {
                return builderResult.friendId
            }
            set (value) {
                builderResult.hasFriendId = true
                builderResult.friendId = value
            }
        }
        public var hasFriendId:Bool {
            get {
                return builderResult.hasFriendId
            }
        }
        @discardableResult
        public func setFriendId(_ value:String) -> ProtoFriend.Builder {
            self.friendId = value
            return self
        }
        @discardableResult
        public func clearFriendId() -> ProtoFriend.Builder{
            builderResult.hasFriendId = false
            builderResult.friendId = nil
            return self
        }
        public var section:String {
            get {
                return builderResult.section
            }
            set (value) {
                builderResult.hasSection = true
                builderResult.section = value
            }
        }
        public var hasSection:Bool {
            get {
                return builderResult.hasSection
            }
        }
        @discardableResult
        public func setSection(_ value:String) -> ProtoFriend.Builder {
            self.section = value
            return self
        }
        @discardableResult
        public func clearSection() -> ProtoFriend.Builder{
            builderResult.hasSection = false
            builderResult.section = nil
            return self
        }
        public var isDeleted:Bool {
            get {
                return builderResult.isDeleted
            }
            set (value) {
                builderResult.hasIsDeleted = true
                builderResult.isDeleted = value
            }
        }
        public var hasIsDeleted:Bool {
            get {
                return builderResult.hasIsDeleted
            }
        }
        @discardableResult
        public func setIsDeleted(_ value:Bool) -> ProtoFriend.Builder {
            self.isDeleted = value
            return self
        }
        @discardableResult
        public func clearIsDeleted() -> ProtoFriend.Builder{
            builderResult.hasIsDeleted = false
            builderResult.isDeleted = nil
            return self
        }
        public var createdAt:Int64 {
            get {
                return builderResult.createdAt
            }
            set (value) {
                builderResult.hasCreatedAt = true
                builderResult.createdAt = value
            }
        }
        public var hasCreatedAt:Bool {
            get {
                return builderResult.hasCreatedAt
            }
        }
        @discardableResult
        public func setCreatedAt(_ value:Int64) -> ProtoFriend.Builder {
            self.createdAt = value
            return self
        }
        @discardableResult
        public func clearCreatedAt() -> ProtoFriend.Builder{
            builderResult.hasCreatedAt = false
            builderResult.createdAt = nil
            return self
        }
        public var updatedAt:Int64 {
            get {
                return builderResult.updatedAt
            }
            set (value) {
                builderResult.hasUpdatedAt = true
                builderResult.updatedAt = value
            }
        }
        public var hasUpdatedAt:Bool {
            get {
                return builderResult.hasUpdatedAt
            }
        }
        @discardableResult
        public func setUpdatedAt(_ value:Int64) -> ProtoFriend.Builder {
            self.updatedAt = value
            return self
        }
        @discardableResult
        public func clearUpdatedAt() -> ProtoFriend.Builder{
            builderResult.hasUpdatedAt = false
            builderResult.updatedAt = nil
            return self
        }
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> ProtoFriend.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> ProtoFriend.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        public var picture:String {
            get {
                return builderResult.picture
            }
            set (value) {
                builderResult.hasPicture = true
                builderResult.picture = value
            }
        }
        public var hasPicture:Bool {
            get {
                return builderResult.hasPicture
            }
        }
        @discardableResult
        public func setPicture(_ value:String) -> ProtoFriend.Builder {
            self.picture = value
            return self
        }
        @discardableResult
        public func clearPicture() -> ProtoFriend.Builder{
            builderResult.hasPicture = false
            builderResult.picture = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> ProtoFriend.Builder {
            builderResult = ProtoFriend()
            return self
        }
        override public func clone() throws -> ProtoFriend.Builder {
            return try ProtoFriend.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> ProtoFriend {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> ProtoFriend {
            let returnMe:ProtoFriend = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:ProtoFriend) throws -> ProtoFriend.Builder {
            if other == ProtoFriend() {
                return self
            }
            if other.hasObjectId {
                objectId = other.objectId
            }
            if other.hasFriendId {
                friendId = other.friendId
            }
            if other.hasSection {
                section = other.section
            }
            if other.hasIsDeleted {
                isDeleted = other.isDeleted
            }
            if other.hasCreatedAt {
                createdAt = other.createdAt
            }
            if other.hasUpdatedAt {
                updatedAt = other.updatedAt
            }
            if other.hasName {
                name = other.name
            }
            if other.hasPicture {
                picture = other.picture
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ProtoFriend.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFriend.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    objectId = try codedInputStream.readString()

                case 18:
                    friendId = try codedInputStream.readString()

                case 26:
                    section = try codedInputStream.readString()

                case 32:
                    isDeleted = try codedInputStream.readBool()

                case 40:
                    createdAt = try codedInputStream.readInt64()

                case 48:
                    updatedAt = try codedInputStream.readInt64()

                case 58:
                    name = try codedInputStream.readString()

                case 66:
                    picture = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ProtoFriend.Builder {
            let resultDecodedBuilder = ProtoFriend.Builder()
            if let jsonValueObjectId = jsonMap["objectId"] as? String {
                resultDecodedBuilder.objectId = jsonValueObjectId
            }
            if let jsonValueFriendId = jsonMap["friendId"] as? String {
                resultDecodedBuilder.friendId = jsonValueFriendId
            }
            if let jsonValueSection = jsonMap["section"] as? String {
                resultDecodedBuilder.section = jsonValueSection
            }
            if let jsonValueIsDeleted = jsonMap["isDeleted"] as? Bool {
                resultDecodedBuilder.isDeleted = jsonValueIsDeleted
            }
            if let jsonValueCreatedAt = jsonMap["createdAt"] as? String {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)!
            } else if let jsonValueCreatedAt = jsonMap["createdAt"] as? Int {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)
            }
            if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? String {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)!
            } else if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? Int {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)
            }
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValuePicture = jsonMap["picture"] as? String {
                resultDecodedBuilder.picture = jsonValuePicture
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoFriend.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try ProtoFriend.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class ProtoMessage : GeneratedMessage {
    public typealias BuilderType = ProtoMessage.Builder

    public static func == (lhs: ProtoMessage, rhs: ProtoMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasObjectId == rhs.hasObjectId) && (!lhs.hasObjectId || lhs.objectId == rhs.objectId)
        fieldCheck = fieldCheck && (lhs.hasChatId == rhs.hasChatId) && (!lhs.hasChatId || lhs.chatId == rhs.chatId)
        fieldCheck = fieldCheck && (lhs.hasMembers == rhs.hasMembers) && (!lhs.hasMembers || lhs.members == rhs.members)
        fieldCheck = fieldCheck && (lhs.hasSenderId == rhs.hasSenderId) && (!lhs.hasSenderId || lhs.senderId == rhs.senderId)
        fieldCheck = fieldCheck && (lhs.hasSenderName == rhs.hasSenderName) && (!lhs.hasSenderName || lhs.senderName == rhs.senderName)
        fieldCheck = fieldCheck && (lhs.hasSenderPicture == rhs.hasSenderPicture) && (!lhs.hasSenderPicture || lhs.senderPicture == rhs.senderPicture)
        fieldCheck = fieldCheck && (lhs.hasRecipientId == rhs.hasRecipientId) && (!lhs.hasRecipientId || lhs.recipientId == rhs.recipientId)
        fieldCheck = fieldCheck && (lhs.hasRecipientName == rhs.hasRecipientName) && (!lhs.hasRecipientName || lhs.recipientName == rhs.recipientName)
        fieldCheck = fieldCheck && (lhs.hasRecipientPicture == rhs.hasRecipientPicture) && (!lhs.hasRecipientPicture || lhs.recipientPicture == rhs.recipientPicture)
        fieldCheck = fieldCheck && (lhs.hasGroupId == rhs.hasGroupId) && (!lhs.hasGroupId || lhs.groupId == rhs.groupId)
        fieldCheck = fieldCheck && (lhs.hasGroupName == rhs.hasGroupName) && (!lhs.hasGroupName || lhs.groupName == rhs.groupName)
        fieldCheck = fieldCheck && (lhs.hasGroupPicture == rhs.hasGroupPicture) && (!lhs.hasGroupPicture || lhs.groupPicture == rhs.groupPicture)
        fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
        fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
        fieldCheck = fieldCheck && (lhs.hasPicture == rhs.hasPicture) && (!lhs.hasPicture || lhs.picture == rhs.picture)
        fieldCheck = fieldCheck && (lhs.hasVideo == rhs.hasVideo) && (!lhs.hasVideo || lhs.video == rhs.video)
        fieldCheck = fieldCheck && (lhs.hasVideoDuration == rhs.hasVideoDuration) && (!lhs.hasVideoDuration || lhs.videoDuration == rhs.videoDuration)
        fieldCheck = fieldCheck && (lhs.hasAudio == rhs.hasAudio) && (!lhs.hasAudio || lhs.audio == rhs.audio)
        fieldCheck = fieldCheck && (lhs.hasAudioDuration == rhs.hasAudioDuration) && (!lhs.hasAudioDuration || lhs.audioDuration == rhs.audioDuration)
        fieldCheck = fieldCheck && (lhs.hasFile == rhs.hasFile) && (!lhs.hasFile || lhs.file == rhs.file)
        fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
        fieldCheck = fieldCheck && (lhs.hasIsDeleted == rhs.hasIsDeleted) && (!lhs.hasIsDeleted || lhs.isDeleted == rhs.isDeleted)
        fieldCheck = fieldCheck && (lhs.hasCreatedAt == rhs.hasCreatedAt) && (!lhs.hasCreatedAt || lhs.createdAt == rhs.createdAt)
        fieldCheck = fieldCheck && (lhs.hasUpdatedAt == rhs.hasUpdatedAt) && (!lhs.hasUpdatedAt || lhs.updatedAt == rhs.updatedAt)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    /// protoc IMMessage.proto --swift_out="./"
    public fileprivate(set) var objectId:String! = nil
    public fileprivate(set) var hasObjectId:Bool = false

    public fileprivate(set) var chatId:String! = nil
    public fileprivate(set) var hasChatId:Bool = false

    public fileprivate(set) var members:String! = nil
    public fileprivate(set) var hasMembers:Bool = false

    public fileprivate(set) var senderId:String! = nil
    public fileprivate(set) var hasSenderId:Bool = false

    public fileprivate(set) var senderName:String! = nil
    public fileprivate(set) var hasSenderName:Bool = false

    public fileprivate(set) var senderPicture:String! = nil
    public fileprivate(set) var hasSenderPicture:Bool = false

    public fileprivate(set) var recipientId:String! = nil
    public fileprivate(set) var hasRecipientId:Bool = false

    public fileprivate(set) var recipientName:String! = nil
    public fileprivate(set) var hasRecipientName:Bool = false

    public fileprivate(set) var recipientPicture:String! = nil
    public fileprivate(set) var hasRecipientPicture:Bool = false

    public fileprivate(set) var groupId:String! = nil
    public fileprivate(set) var hasGroupId:Bool = false

    public fileprivate(set) var groupName:String! = nil
    public fileprivate(set) var hasGroupName:Bool = false

    public fileprivate(set) var groupPicture:String! = nil
    public fileprivate(set) var hasGroupPicture:Bool = false

    public fileprivate(set) var type:String! = nil
    public fileprivate(set) var hasType:Bool = false

    public fileprivate(set) var text:String! = nil
    public fileprivate(set) var hasText:Bool = false

    public fileprivate(set) var picture:Data! = nil
    public fileprivate(set) var hasPicture:Bool = false

    public fileprivate(set) var video:Data! = nil
    public fileprivate(set) var hasVideo:Bool = false

    public fileprivate(set) var videoDuration:Int64! = nil
    public fileprivate(set) var hasVideoDuration:Bool = false

    public fileprivate(set) var audio:Data! = nil
    public fileprivate(set) var hasAudio:Bool = false

    public fileprivate(set) var audioDuration:Int64! = nil
    public fileprivate(set) var hasAudioDuration:Bool = false

    public fileprivate(set) var file:Data! = nil
    public fileprivate(set) var hasFile:Bool = false

    public fileprivate(set) var status:String! = nil
    public fileprivate(set) var hasStatus:Bool = false

    public fileprivate(set) var isDeleted:Bool! = nil
    public fileprivate(set) var hasIsDeleted:Bool = false

    public fileprivate(set) var createdAt:Int64! = nil
    public fileprivate(set) var hasCreatedAt:Bool = false

    public fileprivate(set) var updatedAt:Int64! = nil
    public fileprivate(set) var hasUpdatedAt:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasObjectId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"objectId\" mark required")
        }
        if !hasChatId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"chatId\" mark required")
        }
        if !hasMembers {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"members\" mark required")
        }
        if !hasSenderId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"senderId\" mark required")
        }
        if !hasSenderName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"senderName\" mark required")
        }
        if !hasSenderPicture {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"senderPicture\" mark required")
        }
        if !hasRecipientId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"recipientId\" mark required")
        }
        if !hasRecipientName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"recipientName\" mark required")
        }
        if !hasRecipientPicture {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"recipientPicture\" mark required")
        }
        if !hasGroupId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"groupId\" mark required")
        }
        if !hasGroupName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"groupName\" mark required")
        }
        if !hasGroupPicture {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"groupPicture\" mark required")
        }
        if !hasType {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"type\" mark required")
        }
        if !hasText {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"text\" mark required")
        }
        if !hasVideoDuration {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"videoDuration\" mark required")
        }
        if !hasAudioDuration {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"audioDuration\" mark required")
        }
        if !hasStatus {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"status\" mark required")
        }
        if !hasIsDeleted {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"isDeleted\" mark required")
        }
        if !hasCreatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"createdAt\" mark required")
        }
        if !hasUpdatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoMessage.self): field \"updatedAt\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasObjectId {
            try codedOutputStream.writeString(fieldNumber: 1, value:objectId)
        }
        if hasChatId {
            try codedOutputStream.writeString(fieldNumber: 2, value:chatId)
        }
        if hasMembers {
            try codedOutputStream.writeString(fieldNumber: 3, value:members)
        }
        if hasSenderId {
            try codedOutputStream.writeString(fieldNumber: 4, value:senderId)
        }
        if hasSenderName {
            try codedOutputStream.writeString(fieldNumber: 5, value:senderName)
        }
        if hasSenderPicture {
            try codedOutputStream.writeString(fieldNumber: 6, value:senderPicture)
        }
        if hasRecipientId {
            try codedOutputStream.writeString(fieldNumber: 7, value:recipientId)
        }
        if hasRecipientName {
            try codedOutputStream.writeString(fieldNumber: 8, value:recipientName)
        }
        if hasRecipientPicture {
            try codedOutputStream.writeString(fieldNumber: 9, value:recipientPicture)
        }
        if hasGroupId {
            try codedOutputStream.writeString(fieldNumber: 10, value:groupId)
        }
        if hasGroupName {
            try codedOutputStream.writeString(fieldNumber: 11, value:groupName)
        }
        if hasGroupPicture {
            try codedOutputStream.writeString(fieldNumber: 12, value:groupPicture)
        }
        if hasType {
            try codedOutputStream.writeString(fieldNumber: 13, value:type)
        }
        if hasText {
            try codedOutputStream.writeString(fieldNumber: 14, value:text)
        }
        if hasPicture {
            try codedOutputStream.writeData(fieldNumber: 15, value:picture)
        }
        if hasVideo {
            try codedOutputStream.writeData(fieldNumber: 16, value:video)
        }
        if hasVideoDuration {
            try codedOutputStream.writeInt64(fieldNumber: 17, value:videoDuration)
        }
        if hasAudio {
            try codedOutputStream.writeData(fieldNumber: 18, value:audio)
        }
        if hasAudioDuration {
            try codedOutputStream.writeInt64(fieldNumber: 19, value:audioDuration)
        }
        if hasFile {
            try codedOutputStream.writeData(fieldNumber: 20, value:file)
        }
        if hasStatus {
            try codedOutputStream.writeString(fieldNumber: 21, value:status)
        }
        if hasIsDeleted {
            try codedOutputStream.writeBool(fieldNumber: 22, value:isDeleted)
        }
        if hasCreatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 23, value:createdAt)
        }
        if hasUpdatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 24, value:updatedAt)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasObjectId {
            serialize_size += objectId.computeStringSize(fieldNumber: 1)
        }
        if hasChatId {
            serialize_size += chatId.computeStringSize(fieldNumber: 2)
        }
        if hasMembers {
            serialize_size += members.computeStringSize(fieldNumber: 3)
        }
        if hasSenderId {
            serialize_size += senderId.computeStringSize(fieldNumber: 4)
        }
        if hasSenderName {
            serialize_size += senderName.computeStringSize(fieldNumber: 5)
        }
        if hasSenderPicture {
            serialize_size += senderPicture.computeStringSize(fieldNumber: 6)
        }
        if hasRecipientId {
            serialize_size += recipientId.computeStringSize(fieldNumber: 7)
        }
        if hasRecipientName {
            serialize_size += recipientName.computeStringSize(fieldNumber: 8)
        }
        if hasRecipientPicture {
            serialize_size += recipientPicture.computeStringSize(fieldNumber: 9)
        }
        if hasGroupId {
            serialize_size += groupId.computeStringSize(fieldNumber: 10)
        }
        if hasGroupName {
            serialize_size += groupName.computeStringSize(fieldNumber: 11)
        }
        if hasGroupPicture {
            serialize_size += groupPicture.computeStringSize(fieldNumber: 12)
        }
        if hasType {
            serialize_size += type.computeStringSize(fieldNumber: 13)
        }
        if hasText {
            serialize_size += text.computeStringSize(fieldNumber: 14)
        }
        if hasPicture {
            serialize_size += picture.computeDataSize(fieldNumber: 15)
        }
        if hasVideo {
            serialize_size += video.computeDataSize(fieldNumber: 16)
        }
        if hasVideoDuration {
            serialize_size += videoDuration.computeInt64Size(fieldNumber: 17)
        }
        if hasAudio {
            serialize_size += audio.computeDataSize(fieldNumber: 18)
        }
        if hasAudioDuration {
            serialize_size += audioDuration.computeInt64Size(fieldNumber: 19)
        }
        if hasFile {
            serialize_size += file.computeDataSize(fieldNumber: 20)
        }
        if hasStatus {
            serialize_size += status.computeStringSize(fieldNumber: 21)
        }
        if hasIsDeleted {
            serialize_size += isDeleted.computeBoolSize(fieldNumber: 22)
        }
        if hasCreatedAt {
            serialize_size += createdAt.computeInt64Size(fieldNumber: 23)
        }
        if hasUpdatedAt {
            serialize_size += updatedAt.computeInt64Size(fieldNumber: 24)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> ProtoMessage.Builder {
        return ProtoMessage.classBuilder() as! ProtoMessage.Builder
    }
    public func getBuilder() -> ProtoMessage.Builder {
        return classBuilder() as! ProtoMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoMessage.Builder()
    }
    public func toBuilder() throws -> ProtoMessage.Builder {
        return try ProtoMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:ProtoMessage) throws -> ProtoMessage.Builder {
        return try ProtoMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasObjectId {
            jsonMap["objectId"] = objectId
        }
        if hasChatId {
            jsonMap["chatId"] = chatId
        }
        if hasMembers {
            jsonMap["members"] = members
        }
        if hasSenderId {
            jsonMap["senderId"] = senderId
        }
        if hasSenderName {
            jsonMap["senderName"] = senderName
        }
        if hasSenderPicture {
            jsonMap["senderPicture"] = senderPicture
        }
        if hasRecipientId {
            jsonMap["recipientId"] = recipientId
        }
        if hasRecipientName {
            jsonMap["recipientName"] = recipientName
        }
        if hasRecipientPicture {
            jsonMap["recipientPicture"] = recipientPicture
        }
        if hasGroupId {
            jsonMap["groupId"] = groupId
        }
        if hasGroupName {
            jsonMap["groupName"] = groupName
        }
        if hasGroupPicture {
            jsonMap["groupPicture"] = groupPicture
        }
        if hasType {
            jsonMap["type"] = type
        }
        if hasText {
            jsonMap["text"] = text
        }
        if hasPicture {
            jsonMap["picture"] = picture.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        if hasVideo {
            jsonMap["video"] = video.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        if hasVideoDuration {
            jsonMap["videoDuration"] = "\(videoDuration!)"
        }
        if hasAudio {
            jsonMap["audio"] = audio.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        if hasAudioDuration {
            jsonMap["audioDuration"] = "\(audioDuration!)"
        }
        if hasFile {
            jsonMap["file"] = file.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        if hasStatus {
            jsonMap["status"] = status
        }
        if hasIsDeleted {
            jsonMap["isDeleted"] = isDeleted
        }
        if hasCreatedAt {
            jsonMap["createdAt"] = "\(createdAt!)"
        }
        if hasUpdatedAt {
            jsonMap["updatedAt"] = "\(updatedAt!)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ProtoMessage {
        return try ProtoMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoMessage {
        return try ProtoMessage.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasObjectId {
            output += "\(indent) objectId: \(String(describing: objectId)) \n"
        }
        if hasChatId {
            output += "\(indent) chatId: \(String(describing: chatId)) \n"
        }
        if hasMembers {
            output += "\(indent) members: \(String(describing: members)) \n"
        }
        if hasSenderId {
            output += "\(indent) senderId: \(String(describing: senderId)) \n"
        }
        if hasSenderName {
            output += "\(indent) senderName: \(String(describing: senderName)) \n"
        }
        if hasSenderPicture {
            output += "\(indent) senderPicture: \(String(describing: senderPicture)) \n"
        }
        if hasRecipientId {
            output += "\(indent) recipientId: \(String(describing: recipientId)) \n"
        }
        if hasRecipientName {
            output += "\(indent) recipientName: \(String(describing: recipientName)) \n"
        }
        if hasRecipientPicture {
            output += "\(indent) recipientPicture: \(String(describing: recipientPicture)) \n"
        }
        if hasGroupId {
            output += "\(indent) groupId: \(String(describing: groupId)) \n"
        }
        if hasGroupName {
            output += "\(indent) groupName: \(String(describing: groupName)) \n"
        }
        if hasGroupPicture {
            output += "\(indent) groupPicture: \(String(describing: groupPicture)) \n"
        }
        if hasType {
            output += "\(indent) type: \(String(describing: type)) \n"
        }
        if hasText {
            output += "\(indent) text: \(String(describing: text)) \n"
        }
        if hasPicture {
            output += "\(indent) picture: \(String(describing: picture)) \n"
        }
        if hasVideo {
            output += "\(indent) video: \(String(describing: video)) \n"
        }
        if hasVideoDuration {
            output += "\(indent) videoDuration: \(String(describing: videoDuration)) \n"
        }
        if hasAudio {
            output += "\(indent) audio: \(String(describing: audio)) \n"
        }
        if hasAudioDuration {
            output += "\(indent) audioDuration: \(String(describing: audioDuration)) \n"
        }
        if hasFile {
            output += "\(indent) file: \(String(describing: file)) \n"
        }
        if hasStatus {
            output += "\(indent) status: \(String(describing: status)) \n"
        }
        if hasIsDeleted {
            output += "\(indent) isDeleted: \(String(describing: isDeleted)) \n"
        }
        if hasCreatedAt {
            output += "\(indent) createdAt: \(String(describing: createdAt)) \n"
        }
        if hasUpdatedAt {
            output += "\(indent) updatedAt: \(String(describing: updatedAt)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasObjectId {
                hashCode = (hashCode &* 31) &+ objectId.hashValue
            }
            if hasChatId {
                hashCode = (hashCode &* 31) &+ chatId.hashValue
            }
            if hasMembers {
                hashCode = (hashCode &* 31) &+ members.hashValue
            }
            if hasSenderId {
                hashCode = (hashCode &* 31) &+ senderId.hashValue
            }
            if hasSenderName {
                hashCode = (hashCode &* 31) &+ senderName.hashValue
            }
            if hasSenderPicture {
                hashCode = (hashCode &* 31) &+ senderPicture.hashValue
            }
            if hasRecipientId {
                hashCode = (hashCode &* 31) &+ recipientId.hashValue
            }
            if hasRecipientName {
                hashCode = (hashCode &* 31) &+ recipientName.hashValue
            }
            if hasRecipientPicture {
                hashCode = (hashCode &* 31) &+ recipientPicture.hashValue
            }
            if hasGroupId {
                hashCode = (hashCode &* 31) &+ groupId.hashValue
            }
            if hasGroupName {
                hashCode = (hashCode &* 31) &+ groupName.hashValue
            }
            if hasGroupPicture {
                hashCode = (hashCode &* 31) &+ groupPicture.hashValue
            }
            if hasType {
                hashCode = (hashCode &* 31) &+ type.hashValue
            }
            if hasText {
                hashCode = (hashCode &* 31) &+ text.hashValue
            }
            if hasPicture {
                hashCode = (hashCode &* 31) &+ picture.hashValue
            }
            if hasVideo {
                hashCode = (hashCode &* 31) &+ video.hashValue
            }
            if hasVideoDuration {
                hashCode = (hashCode &* 31) &+ videoDuration.hashValue
            }
            if hasAudio {
                hashCode = (hashCode &* 31) &+ audio.hashValue
            }
            if hasAudioDuration {
                hashCode = (hashCode &* 31) &+ audioDuration.hashValue
            }
            if hasFile {
                hashCode = (hashCode &* 31) &+ file.hashValue
            }
            if hasStatus {
                hashCode = (hashCode &* 31) &+ status.hashValue
            }
            if hasIsDeleted {
                hashCode = (hashCode &* 31) &+ isDeleted.hashValue
            }
            if hasCreatedAt {
                hashCode = (hashCode &* 31) &+ createdAt.hashValue
            }
            if hasUpdatedAt {
                hashCode = (hashCode &* 31) &+ updatedAt.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtoMessage"
    }
    override public func className() -> String {
        return "ProtoMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:ProtoMessage = ProtoMessage()
        public func getMessage() -> ProtoMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        /// protoc IMMessage.proto --swift_out="./"
        public var objectId:String {
            get {
                return builderResult.objectId
            }
            set (value) {
                builderResult.hasObjectId = true
                builderResult.objectId = value
            }
        }
        public var hasObjectId:Bool {
            get {
                return builderResult.hasObjectId
            }
        }
        @discardableResult
        public func setObjectId(_ value:String) -> ProtoMessage.Builder {
            self.objectId = value
            return self
        }
        @discardableResult
        public func clearObjectId() -> ProtoMessage.Builder{
            builderResult.hasObjectId = false
            builderResult.objectId = nil
            return self
        }
        public var chatId:String {
            get {
                return builderResult.chatId
            }
            set (value) {
                builderResult.hasChatId = true
                builderResult.chatId = value
            }
        }
        public var hasChatId:Bool {
            get {
                return builderResult.hasChatId
            }
        }
        @discardableResult
        public func setChatId(_ value:String) -> ProtoMessage.Builder {
            self.chatId = value
            return self
        }
        @discardableResult
        public func clearChatId() -> ProtoMessage.Builder{
            builderResult.hasChatId = false
            builderResult.chatId = nil
            return self
        }
        public var members:String {
            get {
                return builderResult.members
            }
            set (value) {
                builderResult.hasMembers = true
                builderResult.members = value
            }
        }
        public var hasMembers:Bool {
            get {
                return builderResult.hasMembers
            }
        }
        @discardableResult
        public func setMembers(_ value:String) -> ProtoMessage.Builder {
            self.members = value
            return self
        }
        @discardableResult
        public func clearMembers() -> ProtoMessage.Builder{
            builderResult.hasMembers = false
            builderResult.members = nil
            return self
        }
        public var senderId:String {
            get {
                return builderResult.senderId
            }
            set (value) {
                builderResult.hasSenderId = true
                builderResult.senderId = value
            }
        }
        public var hasSenderId:Bool {
            get {
                return builderResult.hasSenderId
            }
        }
        @discardableResult
        public func setSenderId(_ value:String) -> ProtoMessage.Builder {
            self.senderId = value
            return self
        }
        @discardableResult
        public func clearSenderId() -> ProtoMessage.Builder{
            builderResult.hasSenderId = false
            builderResult.senderId = nil
            return self
        }
        public var senderName:String {
            get {
                return builderResult.senderName
            }
            set (value) {
                builderResult.hasSenderName = true
                builderResult.senderName = value
            }
        }
        public var hasSenderName:Bool {
            get {
                return builderResult.hasSenderName
            }
        }
        @discardableResult
        public func setSenderName(_ value:String) -> ProtoMessage.Builder {
            self.senderName = value
            return self
        }
        @discardableResult
        public func clearSenderName() -> ProtoMessage.Builder{
            builderResult.hasSenderName = false
            builderResult.senderName = nil
            return self
        }
        public var senderPicture:String {
            get {
                return builderResult.senderPicture
            }
            set (value) {
                builderResult.hasSenderPicture = true
                builderResult.senderPicture = value
            }
        }
        public var hasSenderPicture:Bool {
            get {
                return builderResult.hasSenderPicture
            }
        }
        @discardableResult
        public func setSenderPicture(_ value:String) -> ProtoMessage.Builder {
            self.senderPicture = value
            return self
        }
        @discardableResult
        public func clearSenderPicture() -> ProtoMessage.Builder{
            builderResult.hasSenderPicture = false
            builderResult.senderPicture = nil
            return self
        }
        public var recipientId:String {
            get {
                return builderResult.recipientId
            }
            set (value) {
                builderResult.hasRecipientId = true
                builderResult.recipientId = value
            }
        }
        public var hasRecipientId:Bool {
            get {
                return builderResult.hasRecipientId
            }
        }
        @discardableResult
        public func setRecipientId(_ value:String) -> ProtoMessage.Builder {
            self.recipientId = value
            return self
        }
        @discardableResult
        public func clearRecipientId() -> ProtoMessage.Builder{
            builderResult.hasRecipientId = false
            builderResult.recipientId = nil
            return self
        }
        public var recipientName:String {
            get {
                return builderResult.recipientName
            }
            set (value) {
                builderResult.hasRecipientName = true
                builderResult.recipientName = value
            }
        }
        public var hasRecipientName:Bool {
            get {
                return builderResult.hasRecipientName
            }
        }
        @discardableResult
        public func setRecipientName(_ value:String) -> ProtoMessage.Builder {
            self.recipientName = value
            return self
        }
        @discardableResult
        public func clearRecipientName() -> ProtoMessage.Builder{
            builderResult.hasRecipientName = false
            builderResult.recipientName = nil
            return self
        }
        public var recipientPicture:String {
            get {
                return builderResult.recipientPicture
            }
            set (value) {
                builderResult.hasRecipientPicture = true
                builderResult.recipientPicture = value
            }
        }
        public var hasRecipientPicture:Bool {
            get {
                return builderResult.hasRecipientPicture
            }
        }
        @discardableResult
        public func setRecipientPicture(_ value:String) -> ProtoMessage.Builder {
            self.recipientPicture = value
            return self
        }
        @discardableResult
        public func clearRecipientPicture() -> ProtoMessage.Builder{
            builderResult.hasRecipientPicture = false
            builderResult.recipientPicture = nil
            return self
        }
        public var groupId:String {
            get {
                return builderResult.groupId
            }
            set (value) {
                builderResult.hasGroupId = true
                builderResult.groupId = value
            }
        }
        public var hasGroupId:Bool {
            get {
                return builderResult.hasGroupId
            }
        }
        @discardableResult
        public func setGroupId(_ value:String) -> ProtoMessage.Builder {
            self.groupId = value
            return self
        }
        @discardableResult
        public func clearGroupId() -> ProtoMessage.Builder{
            builderResult.hasGroupId = false
            builderResult.groupId = nil
            return self
        }
        public var groupName:String {
            get {
                return builderResult.groupName
            }
            set (value) {
                builderResult.hasGroupName = true
                builderResult.groupName = value
            }
        }
        public var hasGroupName:Bool {
            get {
                return builderResult.hasGroupName
            }
        }
        @discardableResult
        public func setGroupName(_ value:String) -> ProtoMessage.Builder {
            self.groupName = value
            return self
        }
        @discardableResult
        public func clearGroupName() -> ProtoMessage.Builder{
            builderResult.hasGroupName = false
            builderResult.groupName = nil
            return self
        }
        public var groupPicture:String {
            get {
                return builderResult.groupPicture
            }
            set (value) {
                builderResult.hasGroupPicture = true
                builderResult.groupPicture = value
            }
        }
        public var hasGroupPicture:Bool {
            get {
                return builderResult.hasGroupPicture
            }
        }
        @discardableResult
        public func setGroupPicture(_ value:String) -> ProtoMessage.Builder {
            self.groupPicture = value
            return self
        }
        @discardableResult
        public func clearGroupPicture() -> ProtoMessage.Builder{
            builderResult.hasGroupPicture = false
            builderResult.groupPicture = nil
            return self
        }
        public var type:String {
            get {
                return builderResult.type
            }
            set (value) {
                builderResult.hasType = true
                builderResult.type = value
            }
        }
        public var hasType:Bool {
            get {
                return builderResult.hasType
            }
        }
        @discardableResult
        public func setType(_ value:String) -> ProtoMessage.Builder {
            self.type = value
            return self
        }
        @discardableResult
        public func clearType() -> ProtoMessage.Builder{
            builderResult.hasType = false
            builderResult.type = nil
            return self
        }
        public var text:String {
            get {
                return builderResult.text
            }
            set (value) {
                builderResult.hasText = true
                builderResult.text = value
            }
        }
        public var hasText:Bool {
            get {
                return builderResult.hasText
            }
        }
        @discardableResult
        public func setText(_ value:String) -> ProtoMessage.Builder {
            self.text = value
            return self
        }
        @discardableResult
        public func clearText() -> ProtoMessage.Builder{
            builderResult.hasText = false
            builderResult.text = nil
            return self
        }
        public var picture:Data {
            get {
                return builderResult.picture
            }
            set (value) {
                builderResult.hasPicture = true
                builderResult.picture = value
            }
        }
        public var hasPicture:Bool {
            get {
                return builderResult.hasPicture
            }
        }
        @discardableResult
        public func setPicture(_ value:Data) -> ProtoMessage.Builder {
            self.picture = value
            return self
        }
        @discardableResult
        public func clearPicture() -> ProtoMessage.Builder{
            builderResult.hasPicture = false
            builderResult.picture = nil
            return self
        }
        public var video:Data {
            get {
                return builderResult.video
            }
            set (value) {
                builderResult.hasVideo = true
                builderResult.video = value
            }
        }
        public var hasVideo:Bool {
            get {
                return builderResult.hasVideo
            }
        }
        @discardableResult
        public func setVideo(_ value:Data) -> ProtoMessage.Builder {
            self.video = value
            return self
        }
        @discardableResult
        public func clearVideo() -> ProtoMessage.Builder{
            builderResult.hasVideo = false
            builderResult.video = nil
            return self
        }
        public var videoDuration:Int64 {
            get {
                return builderResult.videoDuration
            }
            set (value) {
                builderResult.hasVideoDuration = true
                builderResult.videoDuration = value
            }
        }
        public var hasVideoDuration:Bool {
            get {
                return builderResult.hasVideoDuration
            }
        }
        @discardableResult
        public func setVideoDuration(_ value:Int64) -> ProtoMessage.Builder {
            self.videoDuration = value
            return self
        }
        @discardableResult
        public func clearVideoDuration() -> ProtoMessage.Builder{
            builderResult.hasVideoDuration = false
            builderResult.videoDuration = nil
            return self
        }
        public var audio:Data {
            get {
                return builderResult.audio
            }
            set (value) {
                builderResult.hasAudio = true
                builderResult.audio = value
            }
        }
        public var hasAudio:Bool {
            get {
                return builderResult.hasAudio
            }
        }
        @discardableResult
        public func setAudio(_ value:Data) -> ProtoMessage.Builder {
            self.audio = value
            return self
        }
        @discardableResult
        public func clearAudio() -> ProtoMessage.Builder{
            builderResult.hasAudio = false
            builderResult.audio = nil
            return self
        }
        public var audioDuration:Int64 {
            get {
                return builderResult.audioDuration
            }
            set (value) {
                builderResult.hasAudioDuration = true
                builderResult.audioDuration = value
            }
        }
        public var hasAudioDuration:Bool {
            get {
                return builderResult.hasAudioDuration
            }
        }
        @discardableResult
        public func setAudioDuration(_ value:Int64) -> ProtoMessage.Builder {
            self.audioDuration = value
            return self
        }
        @discardableResult
        public func clearAudioDuration() -> ProtoMessage.Builder{
            builderResult.hasAudioDuration = false
            builderResult.audioDuration = nil
            return self
        }
        public var file:Data {
            get {
                return builderResult.file
            }
            set (value) {
                builderResult.hasFile = true
                builderResult.file = value
            }
        }
        public var hasFile:Bool {
            get {
                return builderResult.hasFile
            }
        }
        @discardableResult
        public func setFile(_ value:Data) -> ProtoMessage.Builder {
            self.file = value
            return self
        }
        @discardableResult
        public func clearFile() -> ProtoMessage.Builder{
            builderResult.hasFile = false
            builderResult.file = nil
            return self
        }
        public var status:String {
            get {
                return builderResult.status
            }
            set (value) {
                builderResult.hasStatus = true
                builderResult.status = value
            }
        }
        public var hasStatus:Bool {
            get {
                return builderResult.hasStatus
            }
        }
        @discardableResult
        public func setStatus(_ value:String) -> ProtoMessage.Builder {
            self.status = value
            return self
        }
        @discardableResult
        public func clearStatus() -> ProtoMessage.Builder{
            builderResult.hasStatus = false
            builderResult.status = nil
            return self
        }
        public var isDeleted:Bool {
            get {
                return builderResult.isDeleted
            }
            set (value) {
                builderResult.hasIsDeleted = true
                builderResult.isDeleted = value
            }
        }
        public var hasIsDeleted:Bool {
            get {
                return builderResult.hasIsDeleted
            }
        }
        @discardableResult
        public func setIsDeleted(_ value:Bool) -> ProtoMessage.Builder {
            self.isDeleted = value
            return self
        }
        @discardableResult
        public func clearIsDeleted() -> ProtoMessage.Builder{
            builderResult.hasIsDeleted = false
            builderResult.isDeleted = nil
            return self
        }
        public var createdAt:Int64 {
            get {
                return builderResult.createdAt
            }
            set (value) {
                builderResult.hasCreatedAt = true
                builderResult.createdAt = value
            }
        }
        public var hasCreatedAt:Bool {
            get {
                return builderResult.hasCreatedAt
            }
        }
        @discardableResult
        public func setCreatedAt(_ value:Int64) -> ProtoMessage.Builder {
            self.createdAt = value
            return self
        }
        @discardableResult
        public func clearCreatedAt() -> ProtoMessage.Builder{
            builderResult.hasCreatedAt = false
            builderResult.createdAt = nil
            return self
        }
        public var updatedAt:Int64 {
            get {
                return builderResult.updatedAt
            }
            set (value) {
                builderResult.hasUpdatedAt = true
                builderResult.updatedAt = value
            }
        }
        public var hasUpdatedAt:Bool {
            get {
                return builderResult.hasUpdatedAt
            }
        }
        @discardableResult
        public func setUpdatedAt(_ value:Int64) -> ProtoMessage.Builder {
            self.updatedAt = value
            return self
        }
        @discardableResult
        public func clearUpdatedAt() -> ProtoMessage.Builder{
            builderResult.hasUpdatedAt = false
            builderResult.updatedAt = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> ProtoMessage.Builder {
            builderResult = ProtoMessage()
            return self
        }
        override public func clone() throws -> ProtoMessage.Builder {
            return try ProtoMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> ProtoMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> ProtoMessage {
            let returnMe:ProtoMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:ProtoMessage) throws -> ProtoMessage.Builder {
            if other == ProtoMessage() {
                return self
            }
            if other.hasObjectId {
                objectId = other.objectId
            }
            if other.hasChatId {
                chatId = other.chatId
            }
            if other.hasMembers {
                members = other.members
            }
            if other.hasSenderId {
                senderId = other.senderId
            }
            if other.hasSenderName {
                senderName = other.senderName
            }
            if other.hasSenderPicture {
                senderPicture = other.senderPicture
            }
            if other.hasRecipientId {
                recipientId = other.recipientId
            }
            if other.hasRecipientName {
                recipientName = other.recipientName
            }
            if other.hasRecipientPicture {
                recipientPicture = other.recipientPicture
            }
            if other.hasGroupId {
                groupId = other.groupId
            }
            if other.hasGroupName {
                groupName = other.groupName
            }
            if other.hasGroupPicture {
                groupPicture = other.groupPicture
            }
            if other.hasType {
                type = other.type
            }
            if other.hasText {
                text = other.text
            }
            if other.hasPicture {
                picture = other.picture
            }
            if other.hasVideo {
                video = other.video
            }
            if other.hasVideoDuration {
                videoDuration = other.videoDuration
            }
            if other.hasAudio {
                audio = other.audio
            }
            if other.hasAudioDuration {
                audioDuration = other.audioDuration
            }
            if other.hasFile {
                file = other.file
            }
            if other.hasStatus {
                status = other.status
            }
            if other.hasIsDeleted {
                isDeleted = other.isDeleted
            }
            if other.hasCreatedAt {
                createdAt = other.createdAt
            }
            if other.hasUpdatedAt {
                updatedAt = other.updatedAt
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ProtoMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    objectId = try codedInputStream.readString()

                case 18:
                    chatId = try codedInputStream.readString()

                case 26:
                    members = try codedInputStream.readString()

                case 34:
                    senderId = try codedInputStream.readString()

                case 42:
                    senderName = try codedInputStream.readString()

                case 50:
                    senderPicture = try codedInputStream.readString()

                case 58:
                    recipientId = try codedInputStream.readString()

                case 66:
                    recipientName = try codedInputStream.readString()

                case 74:
                    recipientPicture = try codedInputStream.readString()

                case 82:
                    groupId = try codedInputStream.readString()

                case 90:
                    groupName = try codedInputStream.readString()

                case 98:
                    groupPicture = try codedInputStream.readString()

                case 106:
                    type = try codedInputStream.readString()

                case 114:
                    text = try codedInputStream.readString()

                case 122:
                    picture = try codedInputStream.readData()

                case 130:
                    video = try codedInputStream.readData()

                case 136:
                    videoDuration = try codedInputStream.readInt64()

                case 146:
                    audio = try codedInputStream.readData()

                case 152:
                    audioDuration = try codedInputStream.readInt64()

                case 162:
                    file = try codedInputStream.readData()

                case 170:
                    status = try codedInputStream.readString()

                case 176:
                    isDeleted = try codedInputStream.readBool()

                case 184:
                    createdAt = try codedInputStream.readInt64()

                case 192:
                    updatedAt = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ProtoMessage.Builder {
            let resultDecodedBuilder = ProtoMessage.Builder()
            if let jsonValueObjectId = jsonMap["objectId"] as? String {
                resultDecodedBuilder.objectId = jsonValueObjectId
            }
            if let jsonValueChatId = jsonMap["chatId"] as? String {
                resultDecodedBuilder.chatId = jsonValueChatId
            }
            if let jsonValueMembers = jsonMap["members"] as? String {
                resultDecodedBuilder.members = jsonValueMembers
            }
            if let jsonValueSenderId = jsonMap["senderId"] as? String {
                resultDecodedBuilder.senderId = jsonValueSenderId
            }
            if let jsonValueSenderName = jsonMap["senderName"] as? String {
                resultDecodedBuilder.senderName = jsonValueSenderName
            }
            if let jsonValueSenderPicture = jsonMap["senderPicture"] as? String {
                resultDecodedBuilder.senderPicture = jsonValueSenderPicture
            }
            if let jsonValueRecipientId = jsonMap["recipientId"] as? String {
                resultDecodedBuilder.recipientId = jsonValueRecipientId
            }
            if let jsonValueRecipientName = jsonMap["recipientName"] as? String {
                resultDecodedBuilder.recipientName = jsonValueRecipientName
            }
            if let jsonValueRecipientPicture = jsonMap["recipientPicture"] as? String {
                resultDecodedBuilder.recipientPicture = jsonValueRecipientPicture
            }
            if let jsonValueGroupId = jsonMap["groupId"] as? String {
                resultDecodedBuilder.groupId = jsonValueGroupId
            }
            if let jsonValueGroupName = jsonMap["groupName"] as? String {
                resultDecodedBuilder.groupName = jsonValueGroupName
            }
            if let jsonValueGroupPicture = jsonMap["groupPicture"] as? String {
                resultDecodedBuilder.groupPicture = jsonValueGroupPicture
            }
            if let jsonValueType = jsonMap["type"] as? String {
                resultDecodedBuilder.type = jsonValueType
            }
            if let jsonValueText = jsonMap["text"] as? String {
                resultDecodedBuilder.text = jsonValueText
            }
            if let jsonValuePicture = jsonMap["picture"] as? String {
                resultDecodedBuilder.picture = Data(base64Encoded:jsonValuePicture, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            if let jsonValueVideo = jsonMap["video"] as? String {
                resultDecodedBuilder.video = Data(base64Encoded:jsonValueVideo, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            if let jsonValueVideoDuration = jsonMap["videoDuration"] as? String {
                resultDecodedBuilder.videoDuration = Int64(jsonValueVideoDuration)!
            } else if let jsonValueVideoDuration = jsonMap["videoDuration"] as? Int {
                resultDecodedBuilder.videoDuration = Int64(jsonValueVideoDuration)
            }
            if let jsonValueAudio = jsonMap["audio"] as? String {
                resultDecodedBuilder.audio = Data(base64Encoded:jsonValueAudio, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            if let jsonValueAudioDuration = jsonMap["audioDuration"] as? String {
                resultDecodedBuilder.audioDuration = Int64(jsonValueAudioDuration)!
            } else if let jsonValueAudioDuration = jsonMap["audioDuration"] as? Int {
                resultDecodedBuilder.audioDuration = Int64(jsonValueAudioDuration)
            }
            if let jsonValueFile = jsonMap["file"] as? String {
                resultDecodedBuilder.file = Data(base64Encoded:jsonValueFile, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            if let jsonValueStatus = jsonMap["status"] as? String {
                resultDecodedBuilder.status = jsonValueStatus
            }
            if let jsonValueIsDeleted = jsonMap["isDeleted"] as? Bool {
                resultDecodedBuilder.isDeleted = jsonValueIsDeleted
            }
            if let jsonValueCreatedAt = jsonMap["createdAt"] as? String {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)!
            } else if let jsonValueCreatedAt = jsonMap["createdAt"] as? Int {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)
            }
            if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? String {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)!
            } else if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? Int {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try ProtoMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class ProtoChat : GeneratedMessage {
    public typealias BuilderType = ProtoChat.Builder

    public static func == (lhs: ProtoChat, rhs: ProtoChat) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasChatId == rhs.hasChatId) && (!lhs.hasChatId || lhs.chatId == rhs.chatId)
        fieldCheck = fieldCheck && (lhs.hasRecipientId == rhs.hasRecipientId) && (!lhs.hasRecipientId || lhs.recipientId == rhs.recipientId)
        fieldCheck = fieldCheck && (lhs.hasPicture == rhs.hasPicture) && (!lhs.hasPicture || lhs.picture == rhs.picture)
        fieldCheck = fieldCheck && (lhs.hasGroupId == rhs.hasGroupId) && (!lhs.hasGroupId || lhs.groupId == rhs.groupId)
        fieldCheck = fieldCheck && (lhs.hasLastMessage == rhs.hasLastMessage) && (!lhs.hasLastMessage || lhs.lastMessage == rhs.lastMessage)
        fieldCheck = fieldCheck && (lhs.hasLastMessageName == rhs.hasLastMessageName) && (!lhs.hasLastMessageName || lhs.lastMessageName == rhs.lastMessageName)
        fieldCheck = fieldCheck && (lhs.hasLastMessageDate == rhs.hasLastMessageDate) && (!lhs.hasLastMessageDate || lhs.lastMessageDate == rhs.lastMessageDate)
        fieldCheck = fieldCheck && (lhs.hasLastIncoming == rhs.hasLastIncoming) && (!lhs.hasLastIncoming || lhs.lastIncoming == rhs.lastIncoming)
        fieldCheck = fieldCheck && (lhs.hasIsArchived == rhs.hasIsArchived) && (!lhs.hasIsArchived || lhs.isArchived == rhs.isArchived)
        fieldCheck = fieldCheck && (lhs.hasIsDeleted == rhs.hasIsDeleted) && (!lhs.hasIsDeleted || lhs.isDeleted == rhs.isDeleted)
        fieldCheck = fieldCheck && (lhs.hasCreatedAt == rhs.hasCreatedAt) && (!lhs.hasCreatedAt || lhs.createdAt == rhs.createdAt)
        fieldCheck = fieldCheck && (lhs.hasUpdatedAt == rhs.hasUpdatedAt) && (!lhs.hasUpdatedAt || lhs.updatedAt == rhs.updatedAt)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    /// protoc IMMessage.proto --swift_out="./"
    public fileprivate(set) var chatId:String! = nil
    public fileprivate(set) var hasChatId:Bool = false

    public fileprivate(set) var recipientId:String! = nil
    public fileprivate(set) var hasRecipientId:Bool = false

    public fileprivate(set) var picture:String! = nil
    public fileprivate(set) var hasPicture:Bool = false

    public fileprivate(set) var groupId:String! = nil
    public fileprivate(set) var hasGroupId:Bool = false

    public fileprivate(set) var lastMessage:String! = nil
    public fileprivate(set) var hasLastMessage:Bool = false

    public fileprivate(set) var lastMessageName:String! = nil
    public fileprivate(set) var hasLastMessageName:Bool = false

    public fileprivate(set) var lastMessageDate:Int64! = nil
    public fileprivate(set) var hasLastMessageDate:Bool = false

    public fileprivate(set) var lastIncoming:Int64! = nil
    public fileprivate(set) var hasLastIncoming:Bool = false

    public fileprivate(set) var isArchived:Bool! = nil
    public fileprivate(set) var hasIsArchived:Bool = false

    public fileprivate(set) var isDeleted:Bool! = nil
    public fileprivate(set) var hasIsDeleted:Bool = false

    public fileprivate(set) var createdAt:Int64! = nil
    public fileprivate(set) var hasCreatedAt:Bool = false

    public fileprivate(set) var updatedAt:Int64! = nil
    public fileprivate(set) var hasUpdatedAt:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasChatId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"chatId\" mark required")
        }
        if !hasRecipientId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"recipientId\" mark required")
        }
        if !hasPicture {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"picture\" mark required")
        }
        if !hasGroupId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"groupId\" mark required")
        }
        if !hasLastMessage {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"lastMessage\" mark required")
        }
        if !hasLastMessageName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"lastMessageName\" mark required")
        }
        if !hasLastMessageDate {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"lastMessageDate\" mark required")
        }
        if !hasLastIncoming {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"lastIncoming\" mark required")
        }
        if !hasIsArchived {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"isArchived\" mark required")
        }
        if !hasIsDeleted {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"isDeleted\" mark required")
        }
        if !hasCreatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"createdAt\" mark required")
        }
        if !hasUpdatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoChat.self): field \"updatedAt\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasChatId {
            try codedOutputStream.writeString(fieldNumber: 1, value:chatId)
        }
        if hasRecipientId {
            try codedOutputStream.writeString(fieldNumber: 2, value:recipientId)
        }
        if hasPicture {
            try codedOutputStream.writeString(fieldNumber: 3, value:picture)
        }
        if hasGroupId {
            try codedOutputStream.writeString(fieldNumber: 4, value:groupId)
        }
        if hasLastMessage {
            try codedOutputStream.writeString(fieldNumber: 5, value:lastMessage)
        }
        if hasLastMessageName {
            try codedOutputStream.writeString(fieldNumber: 6, value:lastMessageName)
        }
        if hasLastMessageDate {
            try codedOutputStream.writeInt64(fieldNumber: 7, value:lastMessageDate)
        }
        if hasLastIncoming {
            try codedOutputStream.writeInt64(fieldNumber: 8, value:lastIncoming)
        }
        if hasIsArchived {
            try codedOutputStream.writeBool(fieldNumber: 9, value:isArchived)
        }
        if hasIsDeleted {
            try codedOutputStream.writeBool(fieldNumber: 10, value:isDeleted)
        }
        if hasCreatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 11, value:createdAt)
        }
        if hasUpdatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 12, value:updatedAt)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasChatId {
            serialize_size += chatId.computeStringSize(fieldNumber: 1)
        }
        if hasRecipientId {
            serialize_size += recipientId.computeStringSize(fieldNumber: 2)
        }
        if hasPicture {
            serialize_size += picture.computeStringSize(fieldNumber: 3)
        }
        if hasGroupId {
            serialize_size += groupId.computeStringSize(fieldNumber: 4)
        }
        if hasLastMessage {
            serialize_size += lastMessage.computeStringSize(fieldNumber: 5)
        }
        if hasLastMessageName {
            serialize_size += lastMessageName.computeStringSize(fieldNumber: 6)
        }
        if hasLastMessageDate {
            serialize_size += lastMessageDate.computeInt64Size(fieldNumber: 7)
        }
        if hasLastIncoming {
            serialize_size += lastIncoming.computeInt64Size(fieldNumber: 8)
        }
        if hasIsArchived {
            serialize_size += isArchived.computeBoolSize(fieldNumber: 9)
        }
        if hasIsDeleted {
            serialize_size += isDeleted.computeBoolSize(fieldNumber: 10)
        }
        if hasCreatedAt {
            serialize_size += createdAt.computeInt64Size(fieldNumber: 11)
        }
        if hasUpdatedAt {
            serialize_size += updatedAt.computeInt64Size(fieldNumber: 12)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> ProtoChat.Builder {
        return ProtoChat.classBuilder() as! ProtoChat.Builder
    }
    public func getBuilder() -> ProtoChat.Builder {
        return classBuilder() as! ProtoChat.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoChat.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoChat.Builder()
    }
    public func toBuilder() throws -> ProtoChat.Builder {
        return try ProtoChat.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:ProtoChat) throws -> ProtoChat.Builder {
        return try ProtoChat.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasChatId {
            jsonMap["chatId"] = chatId
        }
        if hasRecipientId {
            jsonMap["recipientId"] = recipientId
        }
        if hasPicture {
            jsonMap["picture"] = picture
        }
        if hasGroupId {
            jsonMap["groupId"] = groupId
        }
        if hasLastMessage {
            jsonMap["lastMessage"] = lastMessage
        }
        if hasLastMessageName {
            jsonMap["lastMessageName"] = lastMessageName
        }
        if hasLastMessageDate {
            jsonMap["lastMessageDate"] = "\(lastMessageDate!)"
        }
        if hasLastIncoming {
            jsonMap["lastIncoming"] = "\(lastIncoming!)"
        }
        if hasIsArchived {
            jsonMap["isArchived"] = isArchived
        }
        if hasIsDeleted {
            jsonMap["isDeleted"] = isDeleted
        }
        if hasCreatedAt {
            jsonMap["createdAt"] = "\(createdAt!)"
        }
        if hasUpdatedAt {
            jsonMap["updatedAt"] = "\(updatedAt!)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ProtoChat {
        return try ProtoChat.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoChat {
        return try ProtoChat.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasChatId {
            output += "\(indent) chatId: \(String(describing: chatId)) \n"
        }
        if hasRecipientId {
            output += "\(indent) recipientId: \(String(describing: recipientId)) \n"
        }
        if hasPicture {
            output += "\(indent) picture: \(String(describing: picture)) \n"
        }
        if hasGroupId {
            output += "\(indent) groupId: \(String(describing: groupId)) \n"
        }
        if hasLastMessage {
            output += "\(indent) lastMessage: \(String(describing: lastMessage)) \n"
        }
        if hasLastMessageName {
            output += "\(indent) lastMessageName: \(String(describing: lastMessageName)) \n"
        }
        if hasLastMessageDate {
            output += "\(indent) lastMessageDate: \(String(describing: lastMessageDate)) \n"
        }
        if hasLastIncoming {
            output += "\(indent) lastIncoming: \(String(describing: lastIncoming)) \n"
        }
        if hasIsArchived {
            output += "\(indent) isArchived: \(String(describing: isArchived)) \n"
        }
        if hasIsDeleted {
            output += "\(indent) isDeleted: \(String(describing: isDeleted)) \n"
        }
        if hasCreatedAt {
            output += "\(indent) createdAt: \(String(describing: createdAt)) \n"
        }
        if hasUpdatedAt {
            output += "\(indent) updatedAt: \(String(describing: updatedAt)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasChatId {
                hashCode = (hashCode &* 31) &+ chatId.hashValue
            }
            if hasRecipientId {
                hashCode = (hashCode &* 31) &+ recipientId.hashValue
            }
            if hasPicture {
                hashCode = (hashCode &* 31) &+ picture.hashValue
            }
            if hasGroupId {
                hashCode = (hashCode &* 31) &+ groupId.hashValue
            }
            if hasLastMessage {
                hashCode = (hashCode &* 31) &+ lastMessage.hashValue
            }
            if hasLastMessageName {
                hashCode = (hashCode &* 31) &+ lastMessageName.hashValue
            }
            if hasLastMessageDate {
                hashCode = (hashCode &* 31) &+ lastMessageDate.hashValue
            }
            if hasLastIncoming {
                hashCode = (hashCode &* 31) &+ lastIncoming.hashValue
            }
            if hasIsArchived {
                hashCode = (hashCode &* 31) &+ isArchived.hashValue
            }
            if hasIsDeleted {
                hashCode = (hashCode &* 31) &+ isDeleted.hashValue
            }
            if hasCreatedAt {
                hashCode = (hashCode &* 31) &+ createdAt.hashValue
            }
            if hasUpdatedAt {
                hashCode = (hashCode &* 31) &+ updatedAt.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtoChat"
    }
    override public func className() -> String {
        return "ProtoChat"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:ProtoChat = ProtoChat()
        public func getMessage() -> ProtoChat {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        /// protoc IMMessage.proto --swift_out="./"
        public var chatId:String {
            get {
                return builderResult.chatId
            }
            set (value) {
                builderResult.hasChatId = true
                builderResult.chatId = value
            }
        }
        public var hasChatId:Bool {
            get {
                return builderResult.hasChatId
            }
        }
        @discardableResult
        public func setChatId(_ value:String) -> ProtoChat.Builder {
            self.chatId = value
            return self
        }
        @discardableResult
        public func clearChatId() -> ProtoChat.Builder{
            builderResult.hasChatId = false
            builderResult.chatId = nil
            return self
        }
        public var recipientId:String {
            get {
                return builderResult.recipientId
            }
            set (value) {
                builderResult.hasRecipientId = true
                builderResult.recipientId = value
            }
        }
        public var hasRecipientId:Bool {
            get {
                return builderResult.hasRecipientId
            }
        }
        @discardableResult
        public func setRecipientId(_ value:String) -> ProtoChat.Builder {
            self.recipientId = value
            return self
        }
        @discardableResult
        public func clearRecipientId() -> ProtoChat.Builder{
            builderResult.hasRecipientId = false
            builderResult.recipientId = nil
            return self
        }
        public var picture:String {
            get {
                return builderResult.picture
            }
            set (value) {
                builderResult.hasPicture = true
                builderResult.picture = value
            }
        }
        public var hasPicture:Bool {
            get {
                return builderResult.hasPicture
            }
        }
        @discardableResult
        public func setPicture(_ value:String) -> ProtoChat.Builder {
            self.picture = value
            return self
        }
        @discardableResult
        public func clearPicture() -> ProtoChat.Builder{
            builderResult.hasPicture = false
            builderResult.picture = nil
            return self
        }
        public var groupId:String {
            get {
                return builderResult.groupId
            }
            set (value) {
                builderResult.hasGroupId = true
                builderResult.groupId = value
            }
        }
        public var hasGroupId:Bool {
            get {
                return builderResult.hasGroupId
            }
        }
        @discardableResult
        public func setGroupId(_ value:String) -> ProtoChat.Builder {
            self.groupId = value
            return self
        }
        @discardableResult
        public func clearGroupId() -> ProtoChat.Builder{
            builderResult.hasGroupId = false
            builderResult.groupId = nil
            return self
        }
        public var lastMessage:String {
            get {
                return builderResult.lastMessage
            }
            set (value) {
                builderResult.hasLastMessage = true
                builderResult.lastMessage = value
            }
        }
        public var hasLastMessage:Bool {
            get {
                return builderResult.hasLastMessage
            }
        }
        @discardableResult
        public func setLastMessage(_ value:String) -> ProtoChat.Builder {
            self.lastMessage = value
            return self
        }
        @discardableResult
        public func clearLastMessage() -> ProtoChat.Builder{
            builderResult.hasLastMessage = false
            builderResult.lastMessage = nil
            return self
        }
        public var lastMessageName:String {
            get {
                return builderResult.lastMessageName
            }
            set (value) {
                builderResult.hasLastMessageName = true
                builderResult.lastMessageName = value
            }
        }
        public var hasLastMessageName:Bool {
            get {
                return builderResult.hasLastMessageName
            }
        }
        @discardableResult
        public func setLastMessageName(_ value:String) -> ProtoChat.Builder {
            self.lastMessageName = value
            return self
        }
        @discardableResult
        public func clearLastMessageName() -> ProtoChat.Builder{
            builderResult.hasLastMessageName = false
            builderResult.lastMessageName = nil
            return self
        }
        public var lastMessageDate:Int64 {
            get {
                return builderResult.lastMessageDate
            }
            set (value) {
                builderResult.hasLastMessageDate = true
                builderResult.lastMessageDate = value
            }
        }
        public var hasLastMessageDate:Bool {
            get {
                return builderResult.hasLastMessageDate
            }
        }
        @discardableResult
        public func setLastMessageDate(_ value:Int64) -> ProtoChat.Builder {
            self.lastMessageDate = value
            return self
        }
        @discardableResult
        public func clearLastMessageDate() -> ProtoChat.Builder{
            builderResult.hasLastMessageDate = false
            builderResult.lastMessageDate = nil
            return self
        }
        public var lastIncoming:Int64 {
            get {
                return builderResult.lastIncoming
            }
            set (value) {
                builderResult.hasLastIncoming = true
                builderResult.lastIncoming = value
            }
        }
        public var hasLastIncoming:Bool {
            get {
                return builderResult.hasLastIncoming
            }
        }
        @discardableResult
        public func setLastIncoming(_ value:Int64) -> ProtoChat.Builder {
            self.lastIncoming = value
            return self
        }
        @discardableResult
        public func clearLastIncoming() -> ProtoChat.Builder{
            builderResult.hasLastIncoming = false
            builderResult.lastIncoming = nil
            return self
        }
        public var isArchived:Bool {
            get {
                return builderResult.isArchived
            }
            set (value) {
                builderResult.hasIsArchived = true
                builderResult.isArchived = value
            }
        }
        public var hasIsArchived:Bool {
            get {
                return builderResult.hasIsArchived
            }
        }
        @discardableResult
        public func setIsArchived(_ value:Bool) -> ProtoChat.Builder {
            self.isArchived = value
            return self
        }
        @discardableResult
        public func clearIsArchived() -> ProtoChat.Builder{
            builderResult.hasIsArchived = false
            builderResult.isArchived = nil
            return self
        }
        public var isDeleted:Bool {
            get {
                return builderResult.isDeleted
            }
            set (value) {
                builderResult.hasIsDeleted = true
                builderResult.isDeleted = value
            }
        }
        public var hasIsDeleted:Bool {
            get {
                return builderResult.hasIsDeleted
            }
        }
        @discardableResult
        public func setIsDeleted(_ value:Bool) -> ProtoChat.Builder {
            self.isDeleted = value
            return self
        }
        @discardableResult
        public func clearIsDeleted() -> ProtoChat.Builder{
            builderResult.hasIsDeleted = false
            builderResult.isDeleted = nil
            return self
        }
        public var createdAt:Int64 {
            get {
                return builderResult.createdAt
            }
            set (value) {
                builderResult.hasCreatedAt = true
                builderResult.createdAt = value
            }
        }
        public var hasCreatedAt:Bool {
            get {
                return builderResult.hasCreatedAt
            }
        }
        @discardableResult
        public func setCreatedAt(_ value:Int64) -> ProtoChat.Builder {
            self.createdAt = value
            return self
        }
        @discardableResult
        public func clearCreatedAt() -> ProtoChat.Builder{
            builderResult.hasCreatedAt = false
            builderResult.createdAt = nil
            return self
        }
        public var updatedAt:Int64 {
            get {
                return builderResult.updatedAt
            }
            set (value) {
                builderResult.hasUpdatedAt = true
                builderResult.updatedAt = value
            }
        }
        public var hasUpdatedAt:Bool {
            get {
                return builderResult.hasUpdatedAt
            }
        }
        @discardableResult
        public func setUpdatedAt(_ value:Int64) -> ProtoChat.Builder {
            self.updatedAt = value
            return self
        }
        @discardableResult
        public func clearUpdatedAt() -> ProtoChat.Builder{
            builderResult.hasUpdatedAt = false
            builderResult.updatedAt = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> ProtoChat.Builder {
            builderResult = ProtoChat()
            return self
        }
        override public func clone() throws -> ProtoChat.Builder {
            return try ProtoChat.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> ProtoChat {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> ProtoChat {
            let returnMe:ProtoChat = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:ProtoChat) throws -> ProtoChat.Builder {
            if other == ProtoChat() {
                return self
            }
            if other.hasChatId {
                chatId = other.chatId
            }
            if other.hasRecipientId {
                recipientId = other.recipientId
            }
            if other.hasPicture {
                picture = other.picture
            }
            if other.hasGroupId {
                groupId = other.groupId
            }
            if other.hasLastMessage {
                lastMessage = other.lastMessage
            }
            if other.hasLastMessageName {
                lastMessageName = other.lastMessageName
            }
            if other.hasLastMessageDate {
                lastMessageDate = other.lastMessageDate
            }
            if other.hasLastIncoming {
                lastIncoming = other.lastIncoming
            }
            if other.hasIsArchived {
                isArchived = other.isArchived
            }
            if other.hasIsDeleted {
                isDeleted = other.isDeleted
            }
            if other.hasCreatedAt {
                createdAt = other.createdAt
            }
            if other.hasUpdatedAt {
                updatedAt = other.updatedAt
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ProtoChat.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoChat.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    chatId = try codedInputStream.readString()

                case 18:
                    recipientId = try codedInputStream.readString()

                case 26:
                    picture = try codedInputStream.readString()

                case 34:
                    groupId = try codedInputStream.readString()

                case 42:
                    lastMessage = try codedInputStream.readString()

                case 50:
                    lastMessageName = try codedInputStream.readString()

                case 56:
                    lastMessageDate = try codedInputStream.readInt64()

                case 64:
                    lastIncoming = try codedInputStream.readInt64()

                case 72:
                    isArchived = try codedInputStream.readBool()

                case 80:
                    isDeleted = try codedInputStream.readBool()

                case 88:
                    createdAt = try codedInputStream.readInt64()

                case 96:
                    updatedAt = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ProtoChat.Builder {
            let resultDecodedBuilder = ProtoChat.Builder()
            if let jsonValueChatId = jsonMap["chatId"] as? String {
                resultDecodedBuilder.chatId = jsonValueChatId
            }
            if let jsonValueRecipientId = jsonMap["recipientId"] as? String {
                resultDecodedBuilder.recipientId = jsonValueRecipientId
            }
            if let jsonValuePicture = jsonMap["picture"] as? String {
                resultDecodedBuilder.picture = jsonValuePicture
            }
            if let jsonValueGroupId = jsonMap["groupId"] as? String {
                resultDecodedBuilder.groupId = jsonValueGroupId
            }
            if let jsonValueLastMessage = jsonMap["lastMessage"] as? String {
                resultDecodedBuilder.lastMessage = jsonValueLastMessage
            }
            if let jsonValueLastMessageName = jsonMap["lastMessageName"] as? String {
                resultDecodedBuilder.lastMessageName = jsonValueLastMessageName
            }
            if let jsonValueLastMessageDate = jsonMap["lastMessageDate"] as? String {
                resultDecodedBuilder.lastMessageDate = Int64(jsonValueLastMessageDate)!
            } else if let jsonValueLastMessageDate = jsonMap["lastMessageDate"] as? Int {
                resultDecodedBuilder.lastMessageDate = Int64(jsonValueLastMessageDate)
            }
            if let jsonValueLastIncoming = jsonMap["lastIncoming"] as? String {
                resultDecodedBuilder.lastIncoming = Int64(jsonValueLastIncoming)!
            } else if let jsonValueLastIncoming = jsonMap["lastIncoming"] as? Int {
                resultDecodedBuilder.lastIncoming = Int64(jsonValueLastIncoming)
            }
            if let jsonValueIsArchived = jsonMap["isArchived"] as? Bool {
                resultDecodedBuilder.isArchived = jsonValueIsArchived
            }
            if let jsonValueIsDeleted = jsonMap["isDeleted"] as? Bool {
                resultDecodedBuilder.isDeleted = jsonValueIsDeleted
            }
            if let jsonValueCreatedAt = jsonMap["createdAt"] as? String {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)!
            } else if let jsonValueCreatedAt = jsonMap["createdAt"] as? Int {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)
            }
            if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? String {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)!
            } else if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? Int {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoChat.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try ProtoChat.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension ProtoUser: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ProtoUser> {
        var mergedArray = Array<ProtoUser>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ProtoUser? {
        return try ProtoUser.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "objectId": return self.objectId
        case "phone": return self.phone
        case "name": return self.name
        case "nickName": return self.nickName
        case "country": return self.country
        case "status": return self.status
        case "picture": return self.picture
        case "thumbnail": return self.thumbnail
        case "lastActive": return self.lastActive
        case "lastTerminate": return self.lastTerminate
        case "createdAt": return self.createdAt
        case "updatedAt": return self.updatedAt
        case "gender": return self.gender
        default: return nil
        }
    }
}
extension ProtoUser.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = ProtoUser
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "objectId": return self.objectId
            case "phone": return self.phone
            case "name": return self.name
            case "nickName": return self.nickName
            case "country": return self.country
            case "status": return self.status
            case "picture": return self.picture
            case "thumbnail": return self.thumbnail
            case "lastActive": return self.lastActive
            case "lastTerminate": return self.lastTerminate
            case "createdAt": return self.createdAt
            case "updatedAt": return self.updatedAt
            case "gender": return self.gender
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "objectId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.objectId = newSubscriptValue
            case "phone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phone = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "nickName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.nickName = newSubscriptValue
            case "country":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.country = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.status = newSubscriptValue
            case "picture":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.picture = newSubscriptValue
            case "thumbnail":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.thumbnail = newSubscriptValue
            case "lastActive":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.lastActive = newSubscriptValue
            case "lastTerminate":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.lastTerminate = newSubscriptValue
            case "createdAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.createdAt = newSubscriptValue
            case "updatedAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.updatedAt = newSubscriptValue
            case "gender":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.gender = newSubscriptValue
            default: return
            }
        }
    }
}
extension ProtoFriend: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ProtoFriend> {
        var mergedArray = Array<ProtoFriend>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ProtoFriend? {
        return try ProtoFriend.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "objectId": return self.objectId
        case "friendId": return self.friendId
        case "section": return self.section
        case "isDeleted": return self.isDeleted
        case "createdAt": return self.createdAt
        case "updatedAt": return self.updatedAt
        case "name": return self.name
        case "picture": return self.picture
        default: return nil
        }
    }
}
extension ProtoFriend.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = ProtoFriend
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "objectId": return self.objectId
            case "friendId": return self.friendId
            case "section": return self.section
            case "isDeleted": return self.isDeleted
            case "createdAt": return self.createdAt
            case "updatedAt": return self.updatedAt
            case "name": return self.name
            case "picture": return self.picture
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "objectId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.objectId = newSubscriptValue
            case "friendId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.friendId = newSubscriptValue
            case "section":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.section = newSubscriptValue
            case "isDeleted":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isDeleted = newSubscriptValue
            case "createdAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.createdAt = newSubscriptValue
            case "updatedAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.updatedAt = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "picture":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.picture = newSubscriptValue
            default: return
            }
        }
    }
}
extension ProtoMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ProtoMessage> {
        var mergedArray = Array<ProtoMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ProtoMessage? {
        return try ProtoMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ProtoMessage {
        return try ProtoMessage.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ProtoMessage {
        return try ProtoMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ProtoMessage {
        return try ProtoMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoMessage {
        return try ProtoMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ProtoMessage {
        return try ProtoMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoMessage {
        return try ProtoMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "objectId": return self.objectId
        case "chatId": return self.chatId
        case "members": return self.members
        case "senderId": return self.senderId
        case "senderName": return self.senderName
        case "senderPicture": return self.senderPicture
        case "recipientId": return self.recipientId
        case "recipientName": return self.recipientName
        case "recipientPicture": return self.recipientPicture
        case "groupId": return self.groupId
        case "groupName": return self.groupName
        case "groupPicture": return self.groupPicture
        case "type": return self.type
        case "text": return self.text
        case "picture": return self.picture
        case "video": return self.video
        case "videoDuration": return self.videoDuration
        case "audio": return self.audio
        case "audioDuration": return self.audioDuration
        case "file": return self.file
        case "status": return self.status
        case "isDeleted": return self.isDeleted
        case "createdAt": return self.createdAt
        case "updatedAt": return self.updatedAt
        default: return nil
        }
    }
}
extension ProtoMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = ProtoMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "objectId": return self.objectId
            case "chatId": return self.chatId
            case "members": return self.members
            case "senderId": return self.senderId
            case "senderName": return self.senderName
            case "senderPicture": return self.senderPicture
            case "recipientId": return self.recipientId
            case "recipientName": return self.recipientName
            case "recipientPicture": return self.recipientPicture
            case "groupId": return self.groupId
            case "groupName": return self.groupName
            case "groupPicture": return self.groupPicture
            case "type": return self.type
            case "text": return self.text
            case "picture": return self.picture
            case "video": return self.video
            case "videoDuration": return self.videoDuration
            case "audio": return self.audio
            case "audioDuration": return self.audioDuration
            case "file": return self.file
            case "status": return self.status
            case "isDeleted": return self.isDeleted
            case "createdAt": return self.createdAt
            case "updatedAt": return self.updatedAt
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "objectId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.objectId = newSubscriptValue
            case "chatId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.chatId = newSubscriptValue
            case "members":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.members = newSubscriptValue
            case "senderId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.senderId = newSubscriptValue
            case "senderName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.senderName = newSubscriptValue
            case "senderPicture":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.senderPicture = newSubscriptValue
            case "recipientId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.recipientId = newSubscriptValue
            case "recipientName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.recipientName = newSubscriptValue
            case "recipientPicture":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.recipientPicture = newSubscriptValue
            case "groupId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.groupId = newSubscriptValue
            case "groupName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.groupName = newSubscriptValue
            case "groupPicture":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.groupPicture = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.type = newSubscriptValue
            case "text":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.text = newSubscriptValue
            case "picture":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.picture = newSubscriptValue
            case "video":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.video = newSubscriptValue
            case "videoDuration":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.videoDuration = newSubscriptValue
            case "audio":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.audio = newSubscriptValue
            case "audioDuration":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.audioDuration = newSubscriptValue
            case "file":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.file = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.status = newSubscriptValue
            case "isDeleted":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isDeleted = newSubscriptValue
            case "createdAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.createdAt = newSubscriptValue
            case "updatedAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.updatedAt = newSubscriptValue
            default: return
            }
        }
    }
}
extension ProtoChat: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ProtoChat> {
        var mergedArray = Array<ProtoChat>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ProtoChat? {
        return try ProtoChat.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ProtoChat {
        return try ProtoChat.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ProtoChat {
        return try ProtoChat.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ProtoChat {
        return try ProtoChat.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoChat {
        return try ProtoChat.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ProtoChat {
        return try ProtoChat.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoChat {
        return try ProtoChat.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "chatId": return self.chatId
        case "recipientId": return self.recipientId
        case "picture": return self.picture
        case "groupId": return self.groupId
        case "lastMessage": return self.lastMessage
        case "lastMessageName": return self.lastMessageName
        case "lastMessageDate": return self.lastMessageDate
        case "lastIncoming": return self.lastIncoming
        case "isArchived": return self.isArchived
        case "isDeleted": return self.isDeleted
        case "createdAt": return self.createdAt
        case "updatedAt": return self.updatedAt
        default: return nil
        }
    }
}
extension ProtoChat.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = ProtoChat
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "chatId": return self.chatId
            case "recipientId": return self.recipientId
            case "picture": return self.picture
            case "groupId": return self.groupId
            case "lastMessage": return self.lastMessage
            case "lastMessageName": return self.lastMessageName
            case "lastMessageDate": return self.lastMessageDate
            case "lastIncoming": return self.lastIncoming
            case "isArchived": return self.isArchived
            case "isDeleted": return self.isDeleted
            case "createdAt": return self.createdAt
            case "updatedAt": return self.updatedAt
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "chatId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.chatId = newSubscriptValue
            case "recipientId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.recipientId = newSubscriptValue
            case "picture":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.picture = newSubscriptValue
            case "groupId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.groupId = newSubscriptValue
            case "lastMessage":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.lastMessage = newSubscriptValue
            case "lastMessageName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.lastMessageName = newSubscriptValue
            case "lastMessageDate":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.lastMessageDate = newSubscriptValue
            case "lastIncoming":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.lastIncoming = newSubscriptValue
            case "isArchived":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isArchived = newSubscriptValue
            case "isDeleted":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isDeleted = newSubscriptValue
            case "createdAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.createdAt = newSubscriptValue
            case "updatedAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.updatedAt = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
